// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Pet {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SPetIntimacy__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SPetIntimacy, global::Protocol.C2SPetIntimacy.Builder> internal__static_Protocol_C2SPetIntimacy__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SPetAdvance__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SPetAdvance, global::Protocol.C2SPetAdvance.Builder> internal__static_Protocol_C2SPetAdvance__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SPetFuse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SPetFuse, global::Protocol.C2SPetFuse.Builder> internal__static_Protocol_C2SPetFuse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SUploadEquip__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SUploadEquip, global::Protocol.C2SUploadEquip.Builder> internal__static_Protocol_C2SUploadEquip__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SChangePetName__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SChangePetName, global::Protocol.C2SChangePetName.Builder> internal__static_Protocol_C2SChangePetName__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SUpgradePetSkill__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SUpgradePetSkill, global::Protocol.C2SUpgradePetSkill.Builder> internal__static_Protocol_C2SUpgradePetSkill__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SStudyEsotericaSkill__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SStudyEsotericaSkill, global::Protocol.C2SStudyEsotericaSkill.Builder> internal__static_Protocol_C2SStudyEsotericaSkill__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SPetIndividualValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SPetIndividualValue, global::Protocol.C2SPetIndividualValue.Builder> internal__static_Protocol_C2SPetIndividualValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SChangePetIndividualValueIsLock__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SChangePetIndividualValueIsLock, global::Protocol.C2SChangePetIndividualValueIsLock.Builder> internal__static_Protocol_C2SChangePetIndividualValueIsLock__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SPetIndividualValueBreakOut__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SPetIndividualValueBreakOut, global::Protocol.C2SPetIndividualValueBreakOut.Builder> internal__static_Protocol_C2SPetIndividualValueBreakOut__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SWashSmelt__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SWashSmelt, global::Protocol.C2SWashSmelt.Builder> internal__static_Protocol_C2SWashSmelt__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SUpgraPet__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SUpgraPet, global::Protocol.C2SUpgraPet.Builder> internal__static_Protocol_C2SUpgraPet__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SSetPetLockStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SSetPetLockStatus, global::Protocol.C2SSetPetLockStatus.Builder> internal__static_Protocol_C2SSetPetLockStatus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CPetDataAdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CPetDataAdd, global::Protocol.S2CPetDataAdd.Builder> internal__static_Protocol_S2CPetDataAdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2COnePet__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2COnePet, global::Protocol.S2COnePet.Builder> internal__static_Protocol_S2COnePet__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2COnePet_SkillLV__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2COnePet.Types.SkillLV, global::Protocol.S2COnePet.Types.SkillLV.Builder> internal__static_Protocol_S2COnePet_SkillLV__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2COnePet_EsotericaSkill__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2COnePet.Types.EsotericaSkill, global::Protocol.S2COnePet.Types.EsotericaSkill.Builder> internal__static_Protocol_S2COnePet_EsotericaSkill__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CAddPet__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CAddPet, global::Protocol.S2CAddPet.Builder> internal__static_Protocol_S2CAddPet__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CMorePet__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CMorePet, global::Protocol.S2CMorePet.Builder> internal__static_Protocol_S2CMorePet__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CUpdateOnePet__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateOnePet, global::Protocol.S2CUpdateOnePet.Builder> internal__static_Protocol_S2CUpdateOnePet__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CUpdatePetOneData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdatePetOneData, global::Protocol.S2CUpdatePetOneData.Builder> internal__static_Protocol_S2CUpdatePetOneData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CUpdatePetName__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdatePetName, global::Protocol.S2CUpdatePetName.Builder> internal__static_Protocol_S2CUpdatePetName__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CPetDel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CPetDel, global::Protocol.S2CPetDel.Builder> internal__static_Protocol_S2CPetDel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CIntimacyUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CIntimacyUpdate, global::Protocol.S2CIntimacyUpdate.Builder> internal__static_Protocol_S2CIntimacyUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CAdvanceUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CAdvanceUpdate, global::Protocol.S2CAdvanceUpdate.Builder> internal__static_Protocol_S2CAdvanceUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CPetFuseUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CPetFuseUpdate, global::Protocol.S2CPetFuseUpdate.Builder> internal__static_Protocol_S2CPetFuseUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CUpdateEquipID__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateEquipID, global::Protocol.S2CUpdateEquipID.Builder> internal__static_Protocol_S2CUpdateEquipID__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CUpdateSkillList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateSkillList, global::Protocol.S2CUpdateSkillList.Builder> internal__static_Protocol_S2CUpdateSkillList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CUpdateOneSkill__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateOneSkill, global::Protocol.S2CUpdateOneSkill.Builder> internal__static_Protocol_S2CUpdateOneSkill__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CUpdateEsotericaSkillList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateEsotericaSkillList, global::Protocol.S2CUpdateEsotericaSkillList.Builder> internal__static_Protocol_S2CUpdateEsotericaSkillList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CUpdateIndividualValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateIndividualValue, global::Protocol.S2CUpdateIndividualValue.Builder> internal__static_Protocol_S2CUpdateIndividualValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CUpdateIndividualValue_OneIndividualValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue, global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue.Builder> internal__static_Protocol_S2CUpdateIndividualValue_OneIndividualValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CUpdatePetLockStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdatePetLockStatus, global::Protocol.S2CUpdatePetLockStatus.Builder> internal__static_Protocol_S2CUpdatePetLockStatus__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Pet() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglQZXQucHJvdG8SCFByb3RvY29sIiwKDkMyU1BldEludGltYWN5EgoKAmlk", 
            "GAEgAigFEg4KBml0ZW1pZBgCIAIoBSIbCg1DMlNQZXRBZHZhbmNlEgoKAmlk", 
            "GAEgAigFIkAKCkMyU1BldEZ1c2USCgoCaWQYASACKAUSDgoGZnVzZWlkGAIg", 
            "AygFEhYKDmZ1c2VleHBjYXJkbnVtGAMgAigFIi0KDkMyU1VwbG9hZEVxdWlw", 
            "EgoKAmlkGAEgAigFEg8KB2VxdWlwaWQYAiACKAUiLAoQQzJTQ2hhbmdlUGV0", 
            "TmFtZRIKCgJpZBgBIAIoBRIMCgRuYW1lGAIgAigJIkEKEkMyU1VwZ3JhZGVQ", 
            "ZXRTa2lsbBIKCgJpZBgBIAIoBRIPCgdza2lsbGlkGAIgAigFEg4KBmRpZmZs", 
            "dhgDIAIoBSI1ChZDMlNTdHVkeUVzb3RlcmljYVNraWxsEgoKAmlkGAEgAigF", 
            "Eg8KB3NraWxsaWQYAiACKAUiPgoVQzJTUGV0SW5kaXZpZHVhbFZhbHVlEgoK", 
            "AmlkGAEgAigFEhkKEWluZGl2aWR1YWx2YWx1ZWlkGAIgAigFIloKIUMyU0No", 
            "YW5nZVBldEluZGl2aWR1YWxWYWx1ZUlzTG9jaxIKCgJpZBgBIAIoBRIZChFp", 
            "bmRpdmlkdWFsdmFsdWVpZBgCIAIoBRIOCgZpc2xvY2sYAyACKAgiRgodQzJT", 
            "UGV0SW5kaXZpZHVhbFZhbHVlQnJlYWtPdXQSCgoCaWQYASACKAUSGQoRaW5k", 
            "aXZpZHVhbHZhbHVlaWQYAiACKAUiGgoMQzJTV2FzaFNtZWx0EgoKAmlkGAEg", 
            "AigFIiwKC0MyU1VwZ3JhUGV0EgoKAmlkGAEgAigFEhEKCWFkdmFuY2VsdhgC", 
            "IAIoBSIxChNDMlNTZXRQZXRMb2NrU3RhdHVzEgoKAmlkGAEgAigFEg4KBmlz", 
            "bG9jaxgCIAIoCCJsCg1TMkNQZXREYXRhQWRkEgoKAmhwGAEgAigFEgoKAmx2", 
            "GAIgAigFEgsKA2F0axgDIAIoBRIMCgRtYXRrGAQgAigFEgsKA2RlZhgFIAIo", 
            "BRIMCgRtZGVmGAYgAigFEg0KBXNwZWVkGAcgAigFIoEFCglTMkNPbmVQZXQS", 
            "CgoCaWQYASACKAUSCwoDc2lkGAIgAigFEgwKBG5hbWUYAyACKAkSCwoDZXhw", 
            "GAQgAigFEgoKAmhwGAUgAigFEgoKAmx2GAYgAigFEgsKA2F0axgHIAIoBRIM", 
            "CgRtYXRrGAggAigFEgsKA2RlZhgJIAIoBRIMCgRtZGVmGAogAigFEg0KBXNw", 
            "ZWVkGAsgAigFEhUKCmludGltYWN5bHYYDCABKAU6ATASFgoLaW50aW1hY3ll", 
            "eHAYDSABKAU6ATASFAoJYWR2YW5jZWx2GA4gASgFOgEwEhEKBmZ1c2VsdhgP", 
            "IAEoBToBMBISCgdmdXNlZXhwGBAgASgFOgEwEhIKB2VxdWlwaWQYESABKAU6", 
            "ATASKgoFc2tpbGwYEiADKAsyGy5Qcm90b2NvbC5TMkNPbmVQZXQuU2tpbGxM", 
            "VhINCgVwb3dlchgTIAIoBRIRCgljaGFyYWN0ZXIYFCACKAUSDQoFdHJhaXQY", 
            "FSADKAUSNgoKZXNraWxsbGlzdBgWIAMoCzIiLlByb3RvY29sLlMyQ09uZVBl", 
            "dC5Fc290ZXJpY2FTa2lsbBIOCgZpc2xvY2sYFyACKAgaRAoHU2tpbGxMVhIt", 
            "CgZudW1iZXIYASACKA4yHS5Qcm90b2NvbC5TMkNPbmVQZXQuU2tpbGxUeXBl", 
            "EgoKAmx2GAIgAigFGjEKDkVzb3RlcmljYVNraWxsEg8KB3NraWxsaWQYASAC", 
            "KAUSDgoGaXNsb2NrGAIgAigIIkUKCVNraWxsVHlwZRIHCgNCaWcQARIKCgZT", 
            "bWFsbDEQAhIKCgZTbWFsbDIQAxIKCgZTbWFsbDMQBBILCgdQYXNzaXZlEAUi", 
            "MAoJUzJDQWRkUGV0EiMKBmFkZHBldBgBIAIoCzITLlByb3RvY29sLlMyQ09u", 
            "ZVBldCIvCgpTMkNNb3JlUGV0EiEKBHBldHMYASADKAsyEy5Qcm90b2NvbC5T", 
            "MkNPbmVQZXQiOQoPUzJDVXBkYXRlT25lUGV0EiYKCXVwZGF0ZXBldBgBIAIo", 
            "CzITLlByb3RvY29sLlMyQ09uZVBldCJAChNTMkNVcGRhdGVQZXRPbmVEYXRh", 
            "EgoKAmlkGAEgAigFEg4KBm51bWJlchgCIAIoBRINCgV2YWx1ZRgDIAIoBSIs", 
            "ChBTMkNVcGRhdGVQZXROYW1lEgoKAmlkGAEgAigFEgwKBG5hbWUYAiACKAki", 
            "FwoJUzJDUGV0RGVsEgoKAmlkGAEgAigFIk4KEVMyQ0ludGltYWN5VXBkYXRl", 
            "EgoKAmlkGAEgAigFEhYKC2ludGltYWN5ZXhwGAIgAigFOgEwEhUKCmludGlt", 
            "YWN5bHYYAyABKAU6ATAiMQoQUzJDQWR2YW5jZVVwZGF0ZRIKCgJpZBgBIAIo", 
            "BRIRCglhZHZhbmNlbHYYAiACKAUiPwoQUzJDUGV0RnVzZVVwZGF0ZRIKCgJp", 
            "ZBgBIAIoBRIPCgdmdXNlZXhwGAIgAigFEg4KBmZ1c2VsdhgDIAEoBSIvChBT", 
            "MkNVcGRhdGVFcXVpcElEEgoKAmlkGAEgAigFEg8KB2VxdWlwaWQYAiACKAUi", 
            "TAoSUzJDVXBkYXRlU2tpbGxMaXN0EgoKAmlkGAEgAigFEioKBXNraWxsGAIg", 
            "AygLMhsuUHJvdG9jb2wuUzJDT25lUGV0LlNraWxsTFYiPAoRUzJDVXBkYXRl", 
            "T25lU2tpbGwSCgoCaWQYASACKAUSDwoHc2tpbGxpZBgCIAIoBRIKCgJsdhgD", 
            "IAIoBSJhChtTMkNVcGRhdGVFc290ZXJpY2FTa2lsbExpc3QSCgoCaWQYASAC", 
            "KAUSNgoKZXNraWxsbGlzdBgCIAMoCzIiLlByb3RvY29sLlMyQ09uZVBldC5F", 
            "c290ZXJpY2FTa2lsbCL5AQoYUzJDVXBkYXRlSW5kaXZpZHVhbFZhbHVlEgoK", 
            "AmlkGAEgAigFEkgKCXNlbGZ2YWx1ZRgCIAMoCzI1LlByb3RvY29sLlMyQ1Vw", 
            "ZGF0ZUluZGl2aWR1YWxWYWx1ZS5PbmVJbmRpdmlkdWFsVmFsdWUahgEKEk9u", 
            "ZUluZGl2aWR1YWxWYWx1ZRIZChFpbmRpdmlkdWFsdmFsdWVpZBgBIAIoBRIX", 
            "Cg9pbmRpdmlkdWFsdmFsdWUYAiACKAUSDgoGaXNsb2NrGAMgAigIEhUKDWlz", 
            "Y2FuYnJlYWtvdXQYBCACKAgSFQoNYnJlYWtvdXR2YWx1ZRgFIAIoBSI0ChZT", 
            "MkNVcGRhdGVQZXRMb2NrU3RhdHVzEgoKAmlkGAEgAigFEg4KBmlzbG9jaxgC", 
          "IAIoCA=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Protocol_C2SPetIntimacy__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Protocol_C2SPetIntimacy__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SPetIntimacy, global::Protocol.C2SPetIntimacy.Builder>(internal__static_Protocol_C2SPetIntimacy__Descriptor,
                new string[] { "Id", "Itemid", });
        internal__static_Protocol_C2SPetAdvance__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Protocol_C2SPetAdvance__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SPetAdvance, global::Protocol.C2SPetAdvance.Builder>(internal__static_Protocol_C2SPetAdvance__Descriptor,
                new string[] { "Id", });
        internal__static_Protocol_C2SPetFuse__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Protocol_C2SPetFuse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SPetFuse, global::Protocol.C2SPetFuse.Builder>(internal__static_Protocol_C2SPetFuse__Descriptor,
                new string[] { "Id", "Fuseid", "Fuseexpcardnum", });
        internal__static_Protocol_C2SUploadEquip__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Protocol_C2SUploadEquip__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SUploadEquip, global::Protocol.C2SUploadEquip.Builder>(internal__static_Protocol_C2SUploadEquip__Descriptor,
                new string[] { "Id", "Equipid", });
        internal__static_Protocol_C2SChangePetName__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Protocol_C2SChangePetName__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SChangePetName, global::Protocol.C2SChangePetName.Builder>(internal__static_Protocol_C2SChangePetName__Descriptor,
                new string[] { "Id", "Name", });
        internal__static_Protocol_C2SUpgradePetSkill__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Protocol_C2SUpgradePetSkill__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SUpgradePetSkill, global::Protocol.C2SUpgradePetSkill.Builder>(internal__static_Protocol_C2SUpgradePetSkill__Descriptor,
                new string[] { "Id", "Skillid", "Difflv", });
        internal__static_Protocol_C2SStudyEsotericaSkill__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Protocol_C2SStudyEsotericaSkill__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SStudyEsotericaSkill, global::Protocol.C2SStudyEsotericaSkill.Builder>(internal__static_Protocol_C2SStudyEsotericaSkill__Descriptor,
                new string[] { "Id", "Skillid", });
        internal__static_Protocol_C2SPetIndividualValue__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Protocol_C2SPetIndividualValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SPetIndividualValue, global::Protocol.C2SPetIndividualValue.Builder>(internal__static_Protocol_C2SPetIndividualValue__Descriptor,
                new string[] { "Id", "Individualvalueid", });
        internal__static_Protocol_C2SChangePetIndividualValueIsLock__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Protocol_C2SChangePetIndividualValueIsLock__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SChangePetIndividualValueIsLock, global::Protocol.C2SChangePetIndividualValueIsLock.Builder>(internal__static_Protocol_C2SChangePetIndividualValueIsLock__Descriptor,
                new string[] { "Id", "Individualvalueid", "Islock", });
        internal__static_Protocol_C2SPetIndividualValueBreakOut__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Protocol_C2SPetIndividualValueBreakOut__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SPetIndividualValueBreakOut, global::Protocol.C2SPetIndividualValueBreakOut.Builder>(internal__static_Protocol_C2SPetIndividualValueBreakOut__Descriptor,
                new string[] { "Id", "Individualvalueid", });
        internal__static_Protocol_C2SWashSmelt__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Protocol_C2SWashSmelt__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SWashSmelt, global::Protocol.C2SWashSmelt.Builder>(internal__static_Protocol_C2SWashSmelt__Descriptor,
                new string[] { "Id", });
        internal__static_Protocol_C2SUpgraPet__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Protocol_C2SUpgraPet__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SUpgraPet, global::Protocol.C2SUpgraPet.Builder>(internal__static_Protocol_C2SUpgraPet__Descriptor,
                new string[] { "Id", "Advancelv", });
        internal__static_Protocol_C2SSetPetLockStatus__Descriptor = Descriptor.MessageTypes[12];
        internal__static_Protocol_C2SSetPetLockStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SSetPetLockStatus, global::Protocol.C2SSetPetLockStatus.Builder>(internal__static_Protocol_C2SSetPetLockStatus__Descriptor,
                new string[] { "Id", "Islock", });
        internal__static_Protocol_S2CPetDataAdd__Descriptor = Descriptor.MessageTypes[13];
        internal__static_Protocol_S2CPetDataAdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CPetDataAdd, global::Protocol.S2CPetDataAdd.Builder>(internal__static_Protocol_S2CPetDataAdd__Descriptor,
                new string[] { "Hp", "Lv", "Atk", "Matk", "Def", "Mdef", "Speed", });
        internal__static_Protocol_S2COnePet__Descriptor = Descriptor.MessageTypes[14];
        internal__static_Protocol_S2COnePet__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2COnePet, global::Protocol.S2COnePet.Builder>(internal__static_Protocol_S2COnePet__Descriptor,
                new string[] { "Id", "Sid", "Name", "Exp", "Hp", "Lv", "Atk", "Matk", "Def", "Mdef", "Speed", "Intimacylv", "Intimacyexp", "Advancelv", "Fuselv", "Fuseexp", "Equipid", "Skill", "Power", "Character", "Trait", "Eskilllist", "Islock", });
        internal__static_Protocol_S2COnePet_SkillLV__Descriptor = internal__static_Protocol_S2COnePet__Descriptor.NestedTypes[0];
        internal__static_Protocol_S2COnePet_SkillLV__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2COnePet.Types.SkillLV, global::Protocol.S2COnePet.Types.SkillLV.Builder>(internal__static_Protocol_S2COnePet_SkillLV__Descriptor,
                new string[] { "Number", "Lv", });
        internal__static_Protocol_S2COnePet_EsotericaSkill__Descriptor = internal__static_Protocol_S2COnePet__Descriptor.NestedTypes[1];
        internal__static_Protocol_S2COnePet_EsotericaSkill__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2COnePet.Types.EsotericaSkill, global::Protocol.S2COnePet.Types.EsotericaSkill.Builder>(internal__static_Protocol_S2COnePet_EsotericaSkill__Descriptor,
                new string[] { "Skillid", "Islock", });
        internal__static_Protocol_S2CAddPet__Descriptor = Descriptor.MessageTypes[15];
        internal__static_Protocol_S2CAddPet__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CAddPet, global::Protocol.S2CAddPet.Builder>(internal__static_Protocol_S2CAddPet__Descriptor,
                new string[] { "Addpet", });
        internal__static_Protocol_S2CMorePet__Descriptor = Descriptor.MessageTypes[16];
        internal__static_Protocol_S2CMorePet__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CMorePet, global::Protocol.S2CMorePet.Builder>(internal__static_Protocol_S2CMorePet__Descriptor,
                new string[] { "Pets", });
        internal__static_Protocol_S2CUpdateOnePet__Descriptor = Descriptor.MessageTypes[17];
        internal__static_Protocol_S2CUpdateOnePet__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateOnePet, global::Protocol.S2CUpdateOnePet.Builder>(internal__static_Protocol_S2CUpdateOnePet__Descriptor,
                new string[] { "Updatepet", });
        internal__static_Protocol_S2CUpdatePetOneData__Descriptor = Descriptor.MessageTypes[18];
        internal__static_Protocol_S2CUpdatePetOneData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdatePetOneData, global::Protocol.S2CUpdatePetOneData.Builder>(internal__static_Protocol_S2CUpdatePetOneData__Descriptor,
                new string[] { "Id", "Number", "Value", });
        internal__static_Protocol_S2CUpdatePetName__Descriptor = Descriptor.MessageTypes[19];
        internal__static_Protocol_S2CUpdatePetName__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdatePetName, global::Protocol.S2CUpdatePetName.Builder>(internal__static_Protocol_S2CUpdatePetName__Descriptor,
                new string[] { "Id", "Name", });
        internal__static_Protocol_S2CPetDel__Descriptor = Descriptor.MessageTypes[20];
        internal__static_Protocol_S2CPetDel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CPetDel, global::Protocol.S2CPetDel.Builder>(internal__static_Protocol_S2CPetDel__Descriptor,
                new string[] { "Id", });
        internal__static_Protocol_S2CIntimacyUpdate__Descriptor = Descriptor.MessageTypes[21];
        internal__static_Protocol_S2CIntimacyUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CIntimacyUpdate, global::Protocol.S2CIntimacyUpdate.Builder>(internal__static_Protocol_S2CIntimacyUpdate__Descriptor,
                new string[] { "Id", "Intimacyexp", "Intimacylv", });
        internal__static_Protocol_S2CAdvanceUpdate__Descriptor = Descriptor.MessageTypes[22];
        internal__static_Protocol_S2CAdvanceUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CAdvanceUpdate, global::Protocol.S2CAdvanceUpdate.Builder>(internal__static_Protocol_S2CAdvanceUpdate__Descriptor,
                new string[] { "Id", "Advancelv", });
        internal__static_Protocol_S2CPetFuseUpdate__Descriptor = Descriptor.MessageTypes[23];
        internal__static_Protocol_S2CPetFuseUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CPetFuseUpdate, global::Protocol.S2CPetFuseUpdate.Builder>(internal__static_Protocol_S2CPetFuseUpdate__Descriptor,
                new string[] { "Id", "Fuseexp", "Fuselv", });
        internal__static_Protocol_S2CUpdateEquipID__Descriptor = Descriptor.MessageTypes[24];
        internal__static_Protocol_S2CUpdateEquipID__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateEquipID, global::Protocol.S2CUpdateEquipID.Builder>(internal__static_Protocol_S2CUpdateEquipID__Descriptor,
                new string[] { "Id", "Equipid", });
        internal__static_Protocol_S2CUpdateSkillList__Descriptor = Descriptor.MessageTypes[25];
        internal__static_Protocol_S2CUpdateSkillList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateSkillList, global::Protocol.S2CUpdateSkillList.Builder>(internal__static_Protocol_S2CUpdateSkillList__Descriptor,
                new string[] { "Id", "Skill", });
        internal__static_Protocol_S2CUpdateOneSkill__Descriptor = Descriptor.MessageTypes[26];
        internal__static_Protocol_S2CUpdateOneSkill__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateOneSkill, global::Protocol.S2CUpdateOneSkill.Builder>(internal__static_Protocol_S2CUpdateOneSkill__Descriptor,
                new string[] { "Id", "Skillid", "Lv", });
        internal__static_Protocol_S2CUpdateEsotericaSkillList__Descriptor = Descriptor.MessageTypes[27];
        internal__static_Protocol_S2CUpdateEsotericaSkillList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateEsotericaSkillList, global::Protocol.S2CUpdateEsotericaSkillList.Builder>(internal__static_Protocol_S2CUpdateEsotericaSkillList__Descriptor,
                new string[] { "Id", "Eskilllist", });
        internal__static_Protocol_S2CUpdateIndividualValue__Descriptor = Descriptor.MessageTypes[28];
        internal__static_Protocol_S2CUpdateIndividualValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateIndividualValue, global::Protocol.S2CUpdateIndividualValue.Builder>(internal__static_Protocol_S2CUpdateIndividualValue__Descriptor,
                new string[] { "Id", "Selfvalue", });
        internal__static_Protocol_S2CUpdateIndividualValue_OneIndividualValue__Descriptor = internal__static_Protocol_S2CUpdateIndividualValue__Descriptor.NestedTypes[0];
        internal__static_Protocol_S2CUpdateIndividualValue_OneIndividualValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue, global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue.Builder>(internal__static_Protocol_S2CUpdateIndividualValue_OneIndividualValue__Descriptor,
                new string[] { "Individualvalueid", "Individualvalue", "Islock", "Iscanbreakout", "Breakoutvalue", });
        internal__static_Protocol_S2CUpdatePetLockStatus__Descriptor = Descriptor.MessageTypes[29];
        internal__static_Protocol_S2CUpdatePetLockStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CUpdatePetLockStatus, global::Protocol.S2CUpdatePetLockStatus.Builder>(internal__static_Protocol_S2CUpdatePetLockStatus__Descriptor,
                new string[] { "Id", "Islock", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SPetIntimacy : pb::GeneratedMessage<C2SPetIntimacy, C2SPetIntimacy.Builder> {
    private C2SPetIntimacy() { }
    private static readonly C2SPetIntimacy defaultInstance = new C2SPetIntimacy().MakeReadOnly();
    private static readonly string[] _c2SPetIntimacyFieldNames = new string[] { "id", "itemid" };
    private static readonly uint[] _c2SPetIntimacyFieldTags = new uint[] { 8, 16 };
    public static C2SPetIntimacy DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SPetIntimacy DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SPetIntimacy ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SPetIntimacy__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SPetIntimacy, C2SPetIntimacy.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SPetIntimacy__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int ItemidFieldNumber = 2;
    private bool hasItemid;
    private int itemid_;
    public bool HasItemid {
      get { return hasItemid; }
    }
    public int Itemid {
      get { return itemid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasItemid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SPetIntimacyFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasItemid) {
        output.WriteInt32(2, field_names[1], Itemid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasItemid) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Itemid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SPetIntimacy ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SPetIntimacy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SPetIntimacy ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SPetIntimacy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SPetIntimacy ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SPetIntimacy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SPetIntimacy ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SPetIntimacy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SPetIntimacy ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SPetIntimacy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SPetIntimacy MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SPetIntimacy prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SPetIntimacy, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SPetIntimacy cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SPetIntimacy result;
      
      private C2SPetIntimacy PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SPetIntimacy original = result;
          result = new C2SPetIntimacy();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SPetIntimacy MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SPetIntimacy.Descriptor; }
      }
      
      public override C2SPetIntimacy DefaultInstanceForType {
        get { return global::Protocol.C2SPetIntimacy.DefaultInstance; }
      }
      
      public override C2SPetIntimacy BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SPetIntimacy) {
          return MergeFrom((C2SPetIntimacy) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SPetIntimacy other) {
        if (other == global::Protocol.C2SPetIntimacy.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasItemid) {
          Itemid = other.Itemid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SPetIntimacyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SPetIntimacyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasItemid = input.ReadInt32(ref result.itemid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasItemid {
        get { return result.hasItemid; }
      }
      public int Itemid {
        get { return result.Itemid; }
        set { SetItemid(value); }
      }
      public Builder SetItemid(int value) {
        PrepareBuilder();
        result.hasItemid = true;
        result.itemid_ = value;
        return this;
      }
      public Builder ClearItemid() {
        PrepareBuilder();
        result.hasItemid = false;
        result.itemid_ = 0;
        return this;
      }
    }
    static C2SPetIntimacy() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SPetAdvance : pb::GeneratedMessage<C2SPetAdvance, C2SPetAdvance.Builder> {
    private C2SPetAdvance() { }
    private static readonly C2SPetAdvance defaultInstance = new C2SPetAdvance().MakeReadOnly();
    private static readonly string[] _c2SPetAdvanceFieldNames = new string[] { "id" };
    private static readonly uint[] _c2SPetAdvanceFieldTags = new uint[] { 8 };
    public static C2SPetAdvance DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SPetAdvance DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SPetAdvance ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SPetAdvance__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SPetAdvance, C2SPetAdvance.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SPetAdvance__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SPetAdvanceFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SPetAdvance ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SPetAdvance ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SPetAdvance ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SPetAdvance ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SPetAdvance ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SPetAdvance ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SPetAdvance ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SPetAdvance ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SPetAdvance ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SPetAdvance ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SPetAdvance MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SPetAdvance prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SPetAdvance, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SPetAdvance cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SPetAdvance result;
      
      private C2SPetAdvance PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SPetAdvance original = result;
          result = new C2SPetAdvance();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SPetAdvance MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SPetAdvance.Descriptor; }
      }
      
      public override C2SPetAdvance DefaultInstanceForType {
        get { return global::Protocol.C2SPetAdvance.DefaultInstance; }
      }
      
      public override C2SPetAdvance BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SPetAdvance) {
          return MergeFrom((C2SPetAdvance) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SPetAdvance other) {
        if (other == global::Protocol.C2SPetAdvance.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SPetAdvanceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SPetAdvanceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static C2SPetAdvance() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SPetFuse : pb::GeneratedMessage<C2SPetFuse, C2SPetFuse.Builder> {
    private C2SPetFuse() { }
    private static readonly C2SPetFuse defaultInstance = new C2SPetFuse().MakeReadOnly();
    private static readonly string[] _c2SPetFuseFieldNames = new string[] { "fuseexpcardnum", "fuseid", "id" };
    private static readonly uint[] _c2SPetFuseFieldTags = new uint[] { 24, 16, 8 };
    public static C2SPetFuse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SPetFuse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SPetFuse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SPetFuse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SPetFuse, C2SPetFuse.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SPetFuse__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int FuseidFieldNumber = 2;
    private pbc::PopsicleList<int> fuseid_ = new pbc::PopsicleList<int>();
    public scg::IList<int> FuseidList {
      get { return pbc::Lists.AsReadOnly(fuseid_); }
    }
    public int FuseidCount {
      get { return fuseid_.Count; }
    }
    public int GetFuseid(int index) {
      return fuseid_[index];
    }
    
    public const int FuseexpcardnumFieldNumber = 3;
    private bool hasFuseexpcardnum;
    private int fuseexpcardnum_;
    public bool HasFuseexpcardnum {
      get { return hasFuseexpcardnum; }
    }
    public int Fuseexpcardnum {
      get { return fuseexpcardnum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasFuseexpcardnum) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SPetFuseFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[2], Id);
      }
      if (fuseid_.Count > 0) {
        output.WriteInt32Array(2, field_names[1], fuseid_);
      }
      if (hasFuseexpcardnum) {
        output.WriteInt32(3, field_names[0], Fuseexpcardnum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      {
        int dataSize = 0;
        foreach (int element in FuseidList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * fuseid_.Count;
      }
      if (hasFuseexpcardnum) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Fuseexpcardnum);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SPetFuse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SPetFuse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SPetFuse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SPetFuse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SPetFuse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SPetFuse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SPetFuse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SPetFuse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SPetFuse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SPetFuse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SPetFuse MakeReadOnly() {
      fuseid_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SPetFuse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SPetFuse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SPetFuse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SPetFuse result;
      
      private C2SPetFuse PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SPetFuse original = result;
          result = new C2SPetFuse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SPetFuse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SPetFuse.Descriptor; }
      }
      
      public override C2SPetFuse DefaultInstanceForType {
        get { return global::Protocol.C2SPetFuse.DefaultInstance; }
      }
      
      public override C2SPetFuse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SPetFuse) {
          return MergeFrom((C2SPetFuse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SPetFuse other) {
        if (other == global::Protocol.C2SPetFuse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.fuseid_.Count != 0) {
          result.fuseid_.Add(other.fuseid_);
        }
        if (other.HasFuseexpcardnum) {
          Fuseexpcardnum = other.Fuseexpcardnum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SPetFuseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SPetFuseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.fuseid_);
              break;
            }
            case 24: {
              result.hasFuseexpcardnum = input.ReadInt32(ref result.fuseexpcardnum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> FuseidList {
        get { return PrepareBuilder().fuseid_; }
      }
      public int FuseidCount {
        get { return result.FuseidCount; }
      }
      public int GetFuseid(int index) {
        return result.GetFuseid(index);
      }
      public Builder SetFuseid(int index, int value) {
        PrepareBuilder();
        result.fuseid_[index] = value;
        return this;
      }
      public Builder AddFuseid(int value) {
        PrepareBuilder();
        result.fuseid_.Add(value);
        return this;
      }
      public Builder AddRangeFuseid(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.fuseid_.Add(values);
        return this;
      }
      public Builder ClearFuseid() {
        PrepareBuilder();
        result.fuseid_.Clear();
        return this;
      }
      
      public bool HasFuseexpcardnum {
        get { return result.hasFuseexpcardnum; }
      }
      public int Fuseexpcardnum {
        get { return result.Fuseexpcardnum; }
        set { SetFuseexpcardnum(value); }
      }
      public Builder SetFuseexpcardnum(int value) {
        PrepareBuilder();
        result.hasFuseexpcardnum = true;
        result.fuseexpcardnum_ = value;
        return this;
      }
      public Builder ClearFuseexpcardnum() {
        PrepareBuilder();
        result.hasFuseexpcardnum = false;
        result.fuseexpcardnum_ = 0;
        return this;
      }
    }
    static C2SPetFuse() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SUploadEquip : pb::GeneratedMessage<C2SUploadEquip, C2SUploadEquip.Builder> {
    private C2SUploadEquip() { }
    private static readonly C2SUploadEquip defaultInstance = new C2SUploadEquip().MakeReadOnly();
    private static readonly string[] _c2SUploadEquipFieldNames = new string[] { "equipid", "id" };
    private static readonly uint[] _c2SUploadEquipFieldTags = new uint[] { 16, 8 };
    public static C2SUploadEquip DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SUploadEquip DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SUploadEquip ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SUploadEquip__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SUploadEquip, C2SUploadEquip.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SUploadEquip__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int EquipidFieldNumber = 2;
    private bool hasEquipid;
    private int equipid_;
    public bool HasEquipid {
      get { return hasEquipid; }
    }
    public int Equipid {
      get { return equipid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasEquipid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SUploadEquipFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasEquipid) {
        output.WriteInt32(2, field_names[0], Equipid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasEquipid) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Equipid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SUploadEquip ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SUploadEquip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SUploadEquip ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SUploadEquip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SUploadEquip ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SUploadEquip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SUploadEquip ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SUploadEquip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SUploadEquip ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SUploadEquip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SUploadEquip MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SUploadEquip prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SUploadEquip, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SUploadEquip cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SUploadEquip result;
      
      private C2SUploadEquip PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SUploadEquip original = result;
          result = new C2SUploadEquip();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SUploadEquip MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SUploadEquip.Descriptor; }
      }
      
      public override C2SUploadEquip DefaultInstanceForType {
        get { return global::Protocol.C2SUploadEquip.DefaultInstance; }
      }
      
      public override C2SUploadEquip BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SUploadEquip) {
          return MergeFrom((C2SUploadEquip) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SUploadEquip other) {
        if (other == global::Protocol.C2SUploadEquip.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasEquipid) {
          Equipid = other.Equipid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SUploadEquipFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SUploadEquipFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasEquipid = input.ReadInt32(ref result.equipid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasEquipid {
        get { return result.hasEquipid; }
      }
      public int Equipid {
        get { return result.Equipid; }
        set { SetEquipid(value); }
      }
      public Builder SetEquipid(int value) {
        PrepareBuilder();
        result.hasEquipid = true;
        result.equipid_ = value;
        return this;
      }
      public Builder ClearEquipid() {
        PrepareBuilder();
        result.hasEquipid = false;
        result.equipid_ = 0;
        return this;
      }
    }
    static C2SUploadEquip() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SChangePetName : pb::GeneratedMessage<C2SChangePetName, C2SChangePetName.Builder> {
    private C2SChangePetName() { }
    private static readonly C2SChangePetName defaultInstance = new C2SChangePetName().MakeReadOnly();
    private static readonly string[] _c2SChangePetNameFieldNames = new string[] { "id", "name" };
    private static readonly uint[] _c2SChangePetNameFieldTags = new uint[] { 8, 18 };
    public static C2SChangePetName DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SChangePetName DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SChangePetName ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SChangePetName__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SChangePetName, C2SChangePetName.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SChangePetName__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SChangePetNameFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[1], Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SChangePetName ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SChangePetName ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SChangePetName ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SChangePetName ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SChangePetName ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SChangePetName ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SChangePetName ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SChangePetName ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SChangePetName ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SChangePetName ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SChangePetName MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SChangePetName prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SChangePetName, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SChangePetName cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SChangePetName result;
      
      private C2SChangePetName PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SChangePetName original = result;
          result = new C2SChangePetName();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SChangePetName MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SChangePetName.Descriptor; }
      }
      
      public override C2SChangePetName DefaultInstanceForType {
        get { return global::Protocol.C2SChangePetName.DefaultInstance; }
      }
      
      public override C2SChangePetName BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SChangePetName) {
          return MergeFrom((C2SChangePetName) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SChangePetName other) {
        if (other == global::Protocol.C2SChangePetName.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SChangePetNameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SChangePetNameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static C2SChangePetName() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SUpgradePetSkill : pb::GeneratedMessage<C2SUpgradePetSkill, C2SUpgradePetSkill.Builder> {
    private C2SUpgradePetSkill() { }
    private static readonly C2SUpgradePetSkill defaultInstance = new C2SUpgradePetSkill().MakeReadOnly();
    private static readonly string[] _c2SUpgradePetSkillFieldNames = new string[] { "difflv", "id", "skillid" };
    private static readonly uint[] _c2SUpgradePetSkillFieldTags = new uint[] { 24, 8, 16 };
    public static C2SUpgradePetSkill DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SUpgradePetSkill DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SUpgradePetSkill ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SUpgradePetSkill__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SUpgradePetSkill, C2SUpgradePetSkill.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SUpgradePetSkill__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int SkillidFieldNumber = 2;
    private bool hasSkillid;
    private int skillid_;
    public bool HasSkillid {
      get { return hasSkillid; }
    }
    public int Skillid {
      get { return skillid_; }
    }
    
    public const int DifflvFieldNumber = 3;
    private bool hasDifflv;
    private int difflv_;
    public bool HasDifflv {
      get { return hasDifflv; }
    }
    public int Difflv {
      get { return difflv_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasSkillid) return false;
        if (!hasDifflv) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SUpgradePetSkillFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasSkillid) {
        output.WriteInt32(2, field_names[2], Skillid);
      }
      if (hasDifflv) {
        output.WriteInt32(3, field_names[0], Difflv);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasSkillid) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Skillid);
      }
      if (hasDifflv) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Difflv);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SUpgradePetSkill ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SUpgradePetSkill ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SUpgradePetSkill ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SUpgradePetSkill ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SUpgradePetSkill ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SUpgradePetSkill ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SUpgradePetSkill ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SUpgradePetSkill ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SUpgradePetSkill ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SUpgradePetSkill ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SUpgradePetSkill MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SUpgradePetSkill prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SUpgradePetSkill, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SUpgradePetSkill cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SUpgradePetSkill result;
      
      private C2SUpgradePetSkill PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SUpgradePetSkill original = result;
          result = new C2SUpgradePetSkill();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SUpgradePetSkill MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SUpgradePetSkill.Descriptor; }
      }
      
      public override C2SUpgradePetSkill DefaultInstanceForType {
        get { return global::Protocol.C2SUpgradePetSkill.DefaultInstance; }
      }
      
      public override C2SUpgradePetSkill BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SUpgradePetSkill) {
          return MergeFrom((C2SUpgradePetSkill) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SUpgradePetSkill other) {
        if (other == global::Protocol.C2SUpgradePetSkill.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSkillid) {
          Skillid = other.Skillid;
        }
        if (other.HasDifflv) {
          Difflv = other.Difflv;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SUpgradePetSkillFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SUpgradePetSkillFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasSkillid = input.ReadInt32(ref result.skillid_);
              break;
            }
            case 24: {
              result.hasDifflv = input.ReadInt32(ref result.difflv_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasSkillid {
        get { return result.hasSkillid; }
      }
      public int Skillid {
        get { return result.Skillid; }
        set { SetSkillid(value); }
      }
      public Builder SetSkillid(int value) {
        PrepareBuilder();
        result.hasSkillid = true;
        result.skillid_ = value;
        return this;
      }
      public Builder ClearSkillid() {
        PrepareBuilder();
        result.hasSkillid = false;
        result.skillid_ = 0;
        return this;
      }
      
      public bool HasDifflv {
        get { return result.hasDifflv; }
      }
      public int Difflv {
        get { return result.Difflv; }
        set { SetDifflv(value); }
      }
      public Builder SetDifflv(int value) {
        PrepareBuilder();
        result.hasDifflv = true;
        result.difflv_ = value;
        return this;
      }
      public Builder ClearDifflv() {
        PrepareBuilder();
        result.hasDifflv = false;
        result.difflv_ = 0;
        return this;
      }
    }
    static C2SUpgradePetSkill() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SStudyEsotericaSkill : pb::GeneratedMessage<C2SStudyEsotericaSkill, C2SStudyEsotericaSkill.Builder> {
    private C2SStudyEsotericaSkill() { }
    private static readonly C2SStudyEsotericaSkill defaultInstance = new C2SStudyEsotericaSkill().MakeReadOnly();
    private static readonly string[] _c2SStudyEsotericaSkillFieldNames = new string[] { "id", "skillid" };
    private static readonly uint[] _c2SStudyEsotericaSkillFieldTags = new uint[] { 8, 16 };
    public static C2SStudyEsotericaSkill DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SStudyEsotericaSkill DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SStudyEsotericaSkill ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SStudyEsotericaSkill__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SStudyEsotericaSkill, C2SStudyEsotericaSkill.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SStudyEsotericaSkill__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int SkillidFieldNumber = 2;
    private bool hasSkillid;
    private int skillid_;
    public bool HasSkillid {
      get { return hasSkillid; }
    }
    public int Skillid {
      get { return skillid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasSkillid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SStudyEsotericaSkillFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasSkillid) {
        output.WriteInt32(2, field_names[1], Skillid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasSkillid) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Skillid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SStudyEsotericaSkill ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SStudyEsotericaSkill ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SStudyEsotericaSkill ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SStudyEsotericaSkill ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SStudyEsotericaSkill ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SStudyEsotericaSkill ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SStudyEsotericaSkill ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SStudyEsotericaSkill ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SStudyEsotericaSkill ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SStudyEsotericaSkill ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SStudyEsotericaSkill MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SStudyEsotericaSkill prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SStudyEsotericaSkill, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SStudyEsotericaSkill cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SStudyEsotericaSkill result;
      
      private C2SStudyEsotericaSkill PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SStudyEsotericaSkill original = result;
          result = new C2SStudyEsotericaSkill();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SStudyEsotericaSkill MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SStudyEsotericaSkill.Descriptor; }
      }
      
      public override C2SStudyEsotericaSkill DefaultInstanceForType {
        get { return global::Protocol.C2SStudyEsotericaSkill.DefaultInstance; }
      }
      
      public override C2SStudyEsotericaSkill BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SStudyEsotericaSkill) {
          return MergeFrom((C2SStudyEsotericaSkill) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SStudyEsotericaSkill other) {
        if (other == global::Protocol.C2SStudyEsotericaSkill.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSkillid) {
          Skillid = other.Skillid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SStudyEsotericaSkillFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SStudyEsotericaSkillFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasSkillid = input.ReadInt32(ref result.skillid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasSkillid {
        get { return result.hasSkillid; }
      }
      public int Skillid {
        get { return result.Skillid; }
        set { SetSkillid(value); }
      }
      public Builder SetSkillid(int value) {
        PrepareBuilder();
        result.hasSkillid = true;
        result.skillid_ = value;
        return this;
      }
      public Builder ClearSkillid() {
        PrepareBuilder();
        result.hasSkillid = false;
        result.skillid_ = 0;
        return this;
      }
    }
    static C2SStudyEsotericaSkill() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SPetIndividualValue : pb::GeneratedMessage<C2SPetIndividualValue, C2SPetIndividualValue.Builder> {
    private C2SPetIndividualValue() { }
    private static readonly C2SPetIndividualValue defaultInstance = new C2SPetIndividualValue().MakeReadOnly();
    private static readonly string[] _c2SPetIndividualValueFieldNames = new string[] { "id", "individualvalueid" };
    private static readonly uint[] _c2SPetIndividualValueFieldTags = new uint[] { 8, 16 };
    public static C2SPetIndividualValue DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SPetIndividualValue DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SPetIndividualValue ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SPetIndividualValue__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SPetIndividualValue, C2SPetIndividualValue.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SPetIndividualValue__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int IndividualvalueidFieldNumber = 2;
    private bool hasIndividualvalueid;
    private int individualvalueid_;
    public bool HasIndividualvalueid {
      get { return hasIndividualvalueid; }
    }
    public int Individualvalueid {
      get { return individualvalueid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasIndividualvalueid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SPetIndividualValueFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasIndividualvalueid) {
        output.WriteInt32(2, field_names[1], Individualvalueid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasIndividualvalueid) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Individualvalueid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SPetIndividualValue ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SPetIndividualValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SPetIndividualValue ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SPetIndividualValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SPetIndividualValue ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SPetIndividualValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SPetIndividualValue ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SPetIndividualValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SPetIndividualValue ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SPetIndividualValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SPetIndividualValue MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SPetIndividualValue prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SPetIndividualValue, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SPetIndividualValue cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SPetIndividualValue result;
      
      private C2SPetIndividualValue PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SPetIndividualValue original = result;
          result = new C2SPetIndividualValue();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SPetIndividualValue MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SPetIndividualValue.Descriptor; }
      }
      
      public override C2SPetIndividualValue DefaultInstanceForType {
        get { return global::Protocol.C2SPetIndividualValue.DefaultInstance; }
      }
      
      public override C2SPetIndividualValue BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SPetIndividualValue) {
          return MergeFrom((C2SPetIndividualValue) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SPetIndividualValue other) {
        if (other == global::Protocol.C2SPetIndividualValue.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasIndividualvalueid) {
          Individualvalueid = other.Individualvalueid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SPetIndividualValueFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SPetIndividualValueFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasIndividualvalueid = input.ReadInt32(ref result.individualvalueid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasIndividualvalueid {
        get { return result.hasIndividualvalueid; }
      }
      public int Individualvalueid {
        get { return result.Individualvalueid; }
        set { SetIndividualvalueid(value); }
      }
      public Builder SetIndividualvalueid(int value) {
        PrepareBuilder();
        result.hasIndividualvalueid = true;
        result.individualvalueid_ = value;
        return this;
      }
      public Builder ClearIndividualvalueid() {
        PrepareBuilder();
        result.hasIndividualvalueid = false;
        result.individualvalueid_ = 0;
        return this;
      }
    }
    static C2SPetIndividualValue() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SChangePetIndividualValueIsLock : pb::GeneratedMessage<C2SChangePetIndividualValueIsLock, C2SChangePetIndividualValueIsLock.Builder> {
    private C2SChangePetIndividualValueIsLock() { }
    private static readonly C2SChangePetIndividualValueIsLock defaultInstance = new C2SChangePetIndividualValueIsLock().MakeReadOnly();
    private static readonly string[] _c2SChangePetIndividualValueIsLockFieldNames = new string[] { "id", "individualvalueid", "islock" };
    private static readonly uint[] _c2SChangePetIndividualValueIsLockFieldTags = new uint[] { 8, 16, 24 };
    public static C2SChangePetIndividualValueIsLock DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SChangePetIndividualValueIsLock DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SChangePetIndividualValueIsLock ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SChangePetIndividualValueIsLock__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SChangePetIndividualValueIsLock, C2SChangePetIndividualValueIsLock.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SChangePetIndividualValueIsLock__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int IndividualvalueidFieldNumber = 2;
    private bool hasIndividualvalueid;
    private int individualvalueid_;
    public bool HasIndividualvalueid {
      get { return hasIndividualvalueid; }
    }
    public int Individualvalueid {
      get { return individualvalueid_; }
    }
    
    public const int IslockFieldNumber = 3;
    private bool hasIslock;
    private bool islock_;
    public bool HasIslock {
      get { return hasIslock; }
    }
    public bool Islock {
      get { return islock_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasIndividualvalueid) return false;
        if (!hasIslock) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SChangePetIndividualValueIsLockFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasIndividualvalueid) {
        output.WriteInt32(2, field_names[1], Individualvalueid);
      }
      if (hasIslock) {
        output.WriteBool(3, field_names[2], Islock);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasIndividualvalueid) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Individualvalueid);
      }
      if (hasIslock) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Islock);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SChangePetIndividualValueIsLock ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SChangePetIndividualValueIsLock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SChangePetIndividualValueIsLock ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SChangePetIndividualValueIsLock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SChangePetIndividualValueIsLock ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SChangePetIndividualValueIsLock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SChangePetIndividualValueIsLock ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SChangePetIndividualValueIsLock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SChangePetIndividualValueIsLock ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SChangePetIndividualValueIsLock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SChangePetIndividualValueIsLock MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SChangePetIndividualValueIsLock prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SChangePetIndividualValueIsLock, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SChangePetIndividualValueIsLock cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SChangePetIndividualValueIsLock result;
      
      private C2SChangePetIndividualValueIsLock PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SChangePetIndividualValueIsLock original = result;
          result = new C2SChangePetIndividualValueIsLock();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SChangePetIndividualValueIsLock MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SChangePetIndividualValueIsLock.Descriptor; }
      }
      
      public override C2SChangePetIndividualValueIsLock DefaultInstanceForType {
        get { return global::Protocol.C2SChangePetIndividualValueIsLock.DefaultInstance; }
      }
      
      public override C2SChangePetIndividualValueIsLock BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SChangePetIndividualValueIsLock) {
          return MergeFrom((C2SChangePetIndividualValueIsLock) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SChangePetIndividualValueIsLock other) {
        if (other == global::Protocol.C2SChangePetIndividualValueIsLock.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasIndividualvalueid) {
          Individualvalueid = other.Individualvalueid;
        }
        if (other.HasIslock) {
          Islock = other.Islock;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SChangePetIndividualValueIsLockFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SChangePetIndividualValueIsLockFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasIndividualvalueid = input.ReadInt32(ref result.individualvalueid_);
              break;
            }
            case 24: {
              result.hasIslock = input.ReadBool(ref result.islock_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasIndividualvalueid {
        get { return result.hasIndividualvalueid; }
      }
      public int Individualvalueid {
        get { return result.Individualvalueid; }
        set { SetIndividualvalueid(value); }
      }
      public Builder SetIndividualvalueid(int value) {
        PrepareBuilder();
        result.hasIndividualvalueid = true;
        result.individualvalueid_ = value;
        return this;
      }
      public Builder ClearIndividualvalueid() {
        PrepareBuilder();
        result.hasIndividualvalueid = false;
        result.individualvalueid_ = 0;
        return this;
      }
      
      public bool HasIslock {
        get { return result.hasIslock; }
      }
      public bool Islock {
        get { return result.Islock; }
        set { SetIslock(value); }
      }
      public Builder SetIslock(bool value) {
        PrepareBuilder();
        result.hasIslock = true;
        result.islock_ = value;
        return this;
      }
      public Builder ClearIslock() {
        PrepareBuilder();
        result.hasIslock = false;
        result.islock_ = false;
        return this;
      }
    }
    static C2SChangePetIndividualValueIsLock() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SPetIndividualValueBreakOut : pb::GeneratedMessage<C2SPetIndividualValueBreakOut, C2SPetIndividualValueBreakOut.Builder> {
    private C2SPetIndividualValueBreakOut() { }
    private static readonly C2SPetIndividualValueBreakOut defaultInstance = new C2SPetIndividualValueBreakOut().MakeReadOnly();
    private static readonly string[] _c2SPetIndividualValueBreakOutFieldNames = new string[] { "id", "individualvalueid" };
    private static readonly uint[] _c2SPetIndividualValueBreakOutFieldTags = new uint[] { 8, 16 };
    public static C2SPetIndividualValueBreakOut DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SPetIndividualValueBreakOut DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SPetIndividualValueBreakOut ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SPetIndividualValueBreakOut__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SPetIndividualValueBreakOut, C2SPetIndividualValueBreakOut.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SPetIndividualValueBreakOut__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int IndividualvalueidFieldNumber = 2;
    private bool hasIndividualvalueid;
    private int individualvalueid_;
    public bool HasIndividualvalueid {
      get { return hasIndividualvalueid; }
    }
    public int Individualvalueid {
      get { return individualvalueid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasIndividualvalueid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SPetIndividualValueBreakOutFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasIndividualvalueid) {
        output.WriteInt32(2, field_names[1], Individualvalueid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasIndividualvalueid) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Individualvalueid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SPetIndividualValueBreakOut ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SPetIndividualValueBreakOut ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SPetIndividualValueBreakOut ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SPetIndividualValueBreakOut ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SPetIndividualValueBreakOut ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SPetIndividualValueBreakOut ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SPetIndividualValueBreakOut ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SPetIndividualValueBreakOut ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SPetIndividualValueBreakOut ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SPetIndividualValueBreakOut ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SPetIndividualValueBreakOut MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SPetIndividualValueBreakOut prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SPetIndividualValueBreakOut, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SPetIndividualValueBreakOut cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SPetIndividualValueBreakOut result;
      
      private C2SPetIndividualValueBreakOut PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SPetIndividualValueBreakOut original = result;
          result = new C2SPetIndividualValueBreakOut();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SPetIndividualValueBreakOut MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SPetIndividualValueBreakOut.Descriptor; }
      }
      
      public override C2SPetIndividualValueBreakOut DefaultInstanceForType {
        get { return global::Protocol.C2SPetIndividualValueBreakOut.DefaultInstance; }
      }
      
      public override C2SPetIndividualValueBreakOut BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SPetIndividualValueBreakOut) {
          return MergeFrom((C2SPetIndividualValueBreakOut) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SPetIndividualValueBreakOut other) {
        if (other == global::Protocol.C2SPetIndividualValueBreakOut.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasIndividualvalueid) {
          Individualvalueid = other.Individualvalueid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SPetIndividualValueBreakOutFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SPetIndividualValueBreakOutFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasIndividualvalueid = input.ReadInt32(ref result.individualvalueid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasIndividualvalueid {
        get { return result.hasIndividualvalueid; }
      }
      public int Individualvalueid {
        get { return result.Individualvalueid; }
        set { SetIndividualvalueid(value); }
      }
      public Builder SetIndividualvalueid(int value) {
        PrepareBuilder();
        result.hasIndividualvalueid = true;
        result.individualvalueid_ = value;
        return this;
      }
      public Builder ClearIndividualvalueid() {
        PrepareBuilder();
        result.hasIndividualvalueid = false;
        result.individualvalueid_ = 0;
        return this;
      }
    }
    static C2SPetIndividualValueBreakOut() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SWashSmelt : pb::GeneratedMessage<C2SWashSmelt, C2SWashSmelt.Builder> {
    private C2SWashSmelt() { }
    private static readonly C2SWashSmelt defaultInstance = new C2SWashSmelt().MakeReadOnly();
    private static readonly string[] _c2SWashSmeltFieldNames = new string[] { "id" };
    private static readonly uint[] _c2SWashSmeltFieldTags = new uint[] { 8 };
    public static C2SWashSmelt DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SWashSmelt DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SWashSmelt ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SWashSmelt__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SWashSmelt, C2SWashSmelt.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SWashSmelt__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SWashSmeltFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SWashSmelt ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SWashSmelt ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SWashSmelt ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SWashSmelt ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SWashSmelt ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SWashSmelt ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SWashSmelt ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SWashSmelt ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SWashSmelt ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SWashSmelt ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SWashSmelt MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SWashSmelt prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SWashSmelt, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SWashSmelt cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SWashSmelt result;
      
      private C2SWashSmelt PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SWashSmelt original = result;
          result = new C2SWashSmelt();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SWashSmelt MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SWashSmelt.Descriptor; }
      }
      
      public override C2SWashSmelt DefaultInstanceForType {
        get { return global::Protocol.C2SWashSmelt.DefaultInstance; }
      }
      
      public override C2SWashSmelt BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SWashSmelt) {
          return MergeFrom((C2SWashSmelt) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SWashSmelt other) {
        if (other == global::Protocol.C2SWashSmelt.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SWashSmeltFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SWashSmeltFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static C2SWashSmelt() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SUpgraPet : pb::GeneratedMessage<C2SUpgraPet, C2SUpgraPet.Builder> {
    private C2SUpgraPet() { }
    private static readonly C2SUpgraPet defaultInstance = new C2SUpgraPet().MakeReadOnly();
    private static readonly string[] _c2SUpgraPetFieldNames = new string[] { "advancelv", "id" };
    private static readonly uint[] _c2SUpgraPetFieldTags = new uint[] { 16, 8 };
    public static C2SUpgraPet DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SUpgraPet DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SUpgraPet ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SUpgraPet__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SUpgraPet, C2SUpgraPet.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SUpgraPet__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int AdvancelvFieldNumber = 2;
    private bool hasAdvancelv;
    private int advancelv_;
    public bool HasAdvancelv {
      get { return hasAdvancelv; }
    }
    public int Advancelv {
      get { return advancelv_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasAdvancelv) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SUpgraPetFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasAdvancelv) {
        output.WriteInt32(2, field_names[0], Advancelv);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasAdvancelv) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Advancelv);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SUpgraPet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SUpgraPet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SUpgraPet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SUpgraPet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SUpgraPet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SUpgraPet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SUpgraPet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SUpgraPet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SUpgraPet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SUpgraPet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SUpgraPet MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SUpgraPet prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SUpgraPet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SUpgraPet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SUpgraPet result;
      
      private C2SUpgraPet PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SUpgraPet original = result;
          result = new C2SUpgraPet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SUpgraPet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SUpgraPet.Descriptor; }
      }
      
      public override C2SUpgraPet DefaultInstanceForType {
        get { return global::Protocol.C2SUpgraPet.DefaultInstance; }
      }
      
      public override C2SUpgraPet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SUpgraPet) {
          return MergeFrom((C2SUpgraPet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SUpgraPet other) {
        if (other == global::Protocol.C2SUpgraPet.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasAdvancelv) {
          Advancelv = other.Advancelv;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SUpgraPetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SUpgraPetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasAdvancelv = input.ReadInt32(ref result.advancelv_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasAdvancelv {
        get { return result.hasAdvancelv; }
      }
      public int Advancelv {
        get { return result.Advancelv; }
        set { SetAdvancelv(value); }
      }
      public Builder SetAdvancelv(int value) {
        PrepareBuilder();
        result.hasAdvancelv = true;
        result.advancelv_ = value;
        return this;
      }
      public Builder ClearAdvancelv() {
        PrepareBuilder();
        result.hasAdvancelv = false;
        result.advancelv_ = 0;
        return this;
      }
    }
    static C2SUpgraPet() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SSetPetLockStatus : pb::GeneratedMessage<C2SSetPetLockStatus, C2SSetPetLockStatus.Builder> {
    private C2SSetPetLockStatus() { }
    private static readonly C2SSetPetLockStatus defaultInstance = new C2SSetPetLockStatus().MakeReadOnly();
    private static readonly string[] _c2SSetPetLockStatusFieldNames = new string[] { "id", "islock" };
    private static readonly uint[] _c2SSetPetLockStatusFieldTags = new uint[] { 8, 16 };
    public static C2SSetPetLockStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SSetPetLockStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SSetPetLockStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SSetPetLockStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SSetPetLockStatus, C2SSetPetLockStatus.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_C2SSetPetLockStatus__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int IslockFieldNumber = 2;
    private bool hasIslock;
    private bool islock_;
    public bool HasIslock {
      get { return hasIslock; }
    }
    public bool Islock {
      get { return islock_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasIslock) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SSetPetLockStatusFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasIslock) {
        output.WriteBool(2, field_names[1], Islock);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasIslock) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Islock);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SSetPetLockStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SSetPetLockStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SSetPetLockStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SSetPetLockStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SSetPetLockStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SSetPetLockStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SSetPetLockStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SSetPetLockStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SSetPetLockStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SSetPetLockStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SSetPetLockStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SSetPetLockStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SSetPetLockStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SSetPetLockStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SSetPetLockStatus result;
      
      private C2SSetPetLockStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SSetPetLockStatus original = result;
          result = new C2SSetPetLockStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SSetPetLockStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SSetPetLockStatus.Descriptor; }
      }
      
      public override C2SSetPetLockStatus DefaultInstanceForType {
        get { return global::Protocol.C2SSetPetLockStatus.DefaultInstance; }
      }
      
      public override C2SSetPetLockStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SSetPetLockStatus) {
          return MergeFrom((C2SSetPetLockStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SSetPetLockStatus other) {
        if (other == global::Protocol.C2SSetPetLockStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasIslock) {
          Islock = other.Islock;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SSetPetLockStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SSetPetLockStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasIslock = input.ReadBool(ref result.islock_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasIslock {
        get { return result.hasIslock; }
      }
      public bool Islock {
        get { return result.Islock; }
        set { SetIslock(value); }
      }
      public Builder SetIslock(bool value) {
        PrepareBuilder();
        result.hasIslock = true;
        result.islock_ = value;
        return this;
      }
      public Builder ClearIslock() {
        PrepareBuilder();
        result.hasIslock = false;
        result.islock_ = false;
        return this;
      }
    }
    static C2SSetPetLockStatus() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CPetDataAdd : pb::GeneratedMessage<S2CPetDataAdd, S2CPetDataAdd.Builder> {
    private S2CPetDataAdd() { }
    private static readonly S2CPetDataAdd defaultInstance = new S2CPetDataAdd().MakeReadOnly();
    private static readonly string[] _s2CPetDataAddFieldNames = new string[] { "atk", "def", "hp", "lv", "matk", "mdef", "speed" };
    private static readonly uint[] _s2CPetDataAddFieldTags = new uint[] { 24, 40, 8, 16, 32, 48, 56 };
    public static S2CPetDataAdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CPetDataAdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CPetDataAdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CPetDataAdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CPetDataAdd, S2CPetDataAdd.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CPetDataAdd__FieldAccessorTable; }
    }
    
    public const int HpFieldNumber = 1;
    private bool hasHp;
    private int hp_;
    public bool HasHp {
      get { return hasHp; }
    }
    public int Hp {
      get { return hp_; }
    }
    
    public const int LvFieldNumber = 2;
    private bool hasLv;
    private int lv_;
    public bool HasLv {
      get { return hasLv; }
    }
    public int Lv {
      get { return lv_; }
    }
    
    public const int AtkFieldNumber = 3;
    private bool hasAtk;
    private int atk_;
    public bool HasAtk {
      get { return hasAtk; }
    }
    public int Atk {
      get { return atk_; }
    }
    
    public const int MatkFieldNumber = 4;
    private bool hasMatk;
    private int matk_;
    public bool HasMatk {
      get { return hasMatk; }
    }
    public int Matk {
      get { return matk_; }
    }
    
    public const int DefFieldNumber = 5;
    private bool hasDef;
    private int def_;
    public bool HasDef {
      get { return hasDef; }
    }
    public int Def {
      get { return def_; }
    }
    
    public const int MdefFieldNumber = 6;
    private bool hasMdef;
    private int mdef_;
    public bool HasMdef {
      get { return hasMdef; }
    }
    public int Mdef {
      get { return mdef_; }
    }
    
    public const int SpeedFieldNumber = 7;
    private bool hasSpeed;
    private int speed_;
    public bool HasSpeed {
      get { return hasSpeed; }
    }
    public int Speed {
      get { return speed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHp) return false;
        if (!hasLv) return false;
        if (!hasAtk) return false;
        if (!hasMatk) return false;
        if (!hasDef) return false;
        if (!hasMdef) return false;
        if (!hasSpeed) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CPetDataAddFieldNames;
      if (hasHp) {
        output.WriteInt32(1, field_names[2], Hp);
      }
      if (hasLv) {
        output.WriteInt32(2, field_names[3], Lv);
      }
      if (hasAtk) {
        output.WriteInt32(3, field_names[0], Atk);
      }
      if (hasMatk) {
        output.WriteInt32(4, field_names[4], Matk);
      }
      if (hasDef) {
        output.WriteInt32(5, field_names[1], Def);
      }
      if (hasMdef) {
        output.WriteInt32(6, field_names[5], Mdef);
      }
      if (hasSpeed) {
        output.WriteInt32(7, field_names[6], Speed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHp) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Hp);
      }
      if (hasLv) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Lv);
      }
      if (hasAtk) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Atk);
      }
      if (hasMatk) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Matk);
      }
      if (hasDef) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Def);
      }
      if (hasMdef) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Mdef);
      }
      if (hasSpeed) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Speed);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CPetDataAdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CPetDataAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CPetDataAdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CPetDataAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CPetDataAdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CPetDataAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CPetDataAdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CPetDataAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CPetDataAdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CPetDataAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CPetDataAdd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CPetDataAdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CPetDataAdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CPetDataAdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CPetDataAdd result;
      
      private S2CPetDataAdd PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CPetDataAdd original = result;
          result = new S2CPetDataAdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CPetDataAdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CPetDataAdd.Descriptor; }
      }
      
      public override S2CPetDataAdd DefaultInstanceForType {
        get { return global::Protocol.S2CPetDataAdd.DefaultInstance; }
      }
      
      public override S2CPetDataAdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CPetDataAdd) {
          return MergeFrom((S2CPetDataAdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CPetDataAdd other) {
        if (other == global::Protocol.S2CPetDataAdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHp) {
          Hp = other.Hp;
        }
        if (other.HasLv) {
          Lv = other.Lv;
        }
        if (other.HasAtk) {
          Atk = other.Atk;
        }
        if (other.HasMatk) {
          Matk = other.Matk;
        }
        if (other.HasDef) {
          Def = other.Def;
        }
        if (other.HasMdef) {
          Mdef = other.Mdef;
        }
        if (other.HasSpeed) {
          Speed = other.Speed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CPetDataAddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CPetDataAddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHp = input.ReadInt32(ref result.hp_);
              break;
            }
            case 16: {
              result.hasLv = input.ReadInt32(ref result.lv_);
              break;
            }
            case 24: {
              result.hasAtk = input.ReadInt32(ref result.atk_);
              break;
            }
            case 32: {
              result.hasMatk = input.ReadInt32(ref result.matk_);
              break;
            }
            case 40: {
              result.hasDef = input.ReadInt32(ref result.def_);
              break;
            }
            case 48: {
              result.hasMdef = input.ReadInt32(ref result.mdef_);
              break;
            }
            case 56: {
              result.hasSpeed = input.ReadInt32(ref result.speed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHp {
        get { return result.hasHp; }
      }
      public int Hp {
        get { return result.Hp; }
        set { SetHp(value); }
      }
      public Builder SetHp(int value) {
        PrepareBuilder();
        result.hasHp = true;
        result.hp_ = value;
        return this;
      }
      public Builder ClearHp() {
        PrepareBuilder();
        result.hasHp = false;
        result.hp_ = 0;
        return this;
      }
      
      public bool HasLv {
        get { return result.hasLv; }
      }
      public int Lv {
        get { return result.Lv; }
        set { SetLv(value); }
      }
      public Builder SetLv(int value) {
        PrepareBuilder();
        result.hasLv = true;
        result.lv_ = value;
        return this;
      }
      public Builder ClearLv() {
        PrepareBuilder();
        result.hasLv = false;
        result.lv_ = 0;
        return this;
      }
      
      public bool HasAtk {
        get { return result.hasAtk; }
      }
      public int Atk {
        get { return result.Atk; }
        set { SetAtk(value); }
      }
      public Builder SetAtk(int value) {
        PrepareBuilder();
        result.hasAtk = true;
        result.atk_ = value;
        return this;
      }
      public Builder ClearAtk() {
        PrepareBuilder();
        result.hasAtk = false;
        result.atk_ = 0;
        return this;
      }
      
      public bool HasMatk {
        get { return result.hasMatk; }
      }
      public int Matk {
        get { return result.Matk; }
        set { SetMatk(value); }
      }
      public Builder SetMatk(int value) {
        PrepareBuilder();
        result.hasMatk = true;
        result.matk_ = value;
        return this;
      }
      public Builder ClearMatk() {
        PrepareBuilder();
        result.hasMatk = false;
        result.matk_ = 0;
        return this;
      }
      
      public bool HasDef {
        get { return result.hasDef; }
      }
      public int Def {
        get { return result.Def; }
        set { SetDef(value); }
      }
      public Builder SetDef(int value) {
        PrepareBuilder();
        result.hasDef = true;
        result.def_ = value;
        return this;
      }
      public Builder ClearDef() {
        PrepareBuilder();
        result.hasDef = false;
        result.def_ = 0;
        return this;
      }
      
      public bool HasMdef {
        get { return result.hasMdef; }
      }
      public int Mdef {
        get { return result.Mdef; }
        set { SetMdef(value); }
      }
      public Builder SetMdef(int value) {
        PrepareBuilder();
        result.hasMdef = true;
        result.mdef_ = value;
        return this;
      }
      public Builder ClearMdef() {
        PrepareBuilder();
        result.hasMdef = false;
        result.mdef_ = 0;
        return this;
      }
      
      public bool HasSpeed {
        get { return result.hasSpeed; }
      }
      public int Speed {
        get { return result.Speed; }
        set { SetSpeed(value); }
      }
      public Builder SetSpeed(int value) {
        PrepareBuilder();
        result.hasSpeed = true;
        result.speed_ = value;
        return this;
      }
      public Builder ClearSpeed() {
        PrepareBuilder();
        result.hasSpeed = false;
        result.speed_ = 0;
        return this;
      }
    }
    static S2CPetDataAdd() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2COnePet : pb::GeneratedMessage<S2COnePet, S2COnePet.Builder> {
    private S2COnePet() { }
    private static readonly S2COnePet defaultInstance = new S2COnePet().MakeReadOnly();
    private static readonly string[] _s2COnePetFieldNames = new string[] { "advancelv", "atk", "character", "def", "equipid", "eskilllist", "exp", "fuseexp", "fuselv", "hp", "id", "intimacyexp", "intimacylv", "islock", "lv", "matk", "mdef", "name", "power", "sid", "skill", "speed", "trait" };
    private static readonly uint[] _s2COnePetFieldTags = new uint[] { 112, 56, 160, 72, 136, 178, 32, 128, 120, 40, 8, 104, 96, 184, 48, 64, 80, 26, 152, 16, 146, 88, 168 };
    public static S2COnePet DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2COnePet DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2COnePet ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2COnePet__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2COnePet, S2COnePet.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2COnePet__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum SkillType {
        Big = 1,
        Small1 = 2,
        Small2 = 3,
        Small3 = 4,
        Passive = 5,
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class SkillLV : pb::GeneratedMessage<SkillLV, SkillLV.Builder> {
        private SkillLV() { }
        private static readonly SkillLV defaultInstance = new SkillLV().MakeReadOnly();
        private static readonly string[] _skillLVFieldNames = new string[] { "lv", "number" };
        private static readonly uint[] _skillLVFieldTags = new uint[] { 16, 8 };
        public static SkillLV DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override SkillLV DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override SkillLV ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Protocol.Pet.internal__static_Protocol_S2COnePet_SkillLV__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<SkillLV, SkillLV.Builder> InternalFieldAccessors {
          get { return global::Protocol.Pet.internal__static_Protocol_S2COnePet_SkillLV__FieldAccessorTable; }
        }
        
        public const int NumberFieldNumber = 1;
        private bool hasNumber;
        private global::Protocol.S2COnePet.Types.SkillType number_ = global::Protocol.S2COnePet.Types.SkillType.Big;
        public bool HasNumber {
          get { return hasNumber; }
        }
        public global::Protocol.S2COnePet.Types.SkillType Number {
          get { return number_; }
        }
        
        public const int LvFieldNumber = 2;
        private bool hasLv;
        private int lv_;
        public bool HasLv {
          get { return hasLv; }
        }
        public int Lv {
          get { return lv_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasNumber) return false;
            if (!hasLv) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _skillLVFieldNames;
          if (hasNumber) {
            output.WriteEnum(1, field_names[1], (int) Number, Number);
          }
          if (hasLv) {
            output.WriteInt32(2, field_names[0], Lv);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasNumber) {
            size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Number);
          }
          if (hasLv) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Lv);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static SkillLV ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SkillLV ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SkillLV ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SkillLV ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SkillLV ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SkillLV ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SkillLV ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SkillLV ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SkillLV ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SkillLV ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SkillLV MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SkillLV prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<SkillLV, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(SkillLV cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private SkillLV result;
          
          private SkillLV PrepareBuilder() {
            if (resultIsReadOnly) {
              SkillLV original = result;
              result = new SkillLV();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override SkillLV MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Protocol.S2COnePet.Types.SkillLV.Descriptor; }
          }
          
          public override SkillLV DefaultInstanceForType {
            get { return global::Protocol.S2COnePet.Types.SkillLV.DefaultInstance; }
          }
          
          public override SkillLV BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is SkillLV) {
              return MergeFrom((SkillLV) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(SkillLV other) {
            if (other == global::Protocol.S2COnePet.Types.SkillLV.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasNumber) {
              Number = other.Number;
            }
            if (other.HasLv) {
              Lv = other.Lv;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_skillLVFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _skillLVFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.number_, out unknown)) {
                    result.hasNumber = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
                case 16: {
                  result.hasLv = input.ReadInt32(ref result.lv_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasNumber {
           get { return result.hasNumber; }
          }
          public global::Protocol.S2COnePet.Types.SkillType Number {
            get { return result.Number; }
            set { SetNumber(value); }
          }
          public Builder SetNumber(global::Protocol.S2COnePet.Types.SkillType value) {
            PrepareBuilder();
            result.hasNumber = true;
            result.number_ = value;
            return this;
          }
          public Builder ClearNumber() {
            PrepareBuilder();
            result.hasNumber = false;
            result.number_ = global::Protocol.S2COnePet.Types.SkillType.Big;
            return this;
          }
          
          public bool HasLv {
            get { return result.hasLv; }
          }
          public int Lv {
            get { return result.Lv; }
            set { SetLv(value); }
          }
          public Builder SetLv(int value) {
            PrepareBuilder();
            result.hasLv = true;
            result.lv_ = value;
            return this;
          }
          public Builder ClearLv() {
            PrepareBuilder();
            result.hasLv = false;
            result.lv_ = 0;
            return this;
          }
        }
        static SkillLV() {
          object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class EsotericaSkill : pb::GeneratedMessage<EsotericaSkill, EsotericaSkill.Builder> {
        private EsotericaSkill() { }
        private static readonly EsotericaSkill defaultInstance = new EsotericaSkill().MakeReadOnly();
        private static readonly string[] _esotericaSkillFieldNames = new string[] { "islock", "skillid" };
        private static readonly uint[] _esotericaSkillFieldTags = new uint[] { 16, 8 };
        public static EsotericaSkill DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override EsotericaSkill DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override EsotericaSkill ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Protocol.Pet.internal__static_Protocol_S2COnePet_EsotericaSkill__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<EsotericaSkill, EsotericaSkill.Builder> InternalFieldAccessors {
          get { return global::Protocol.Pet.internal__static_Protocol_S2COnePet_EsotericaSkill__FieldAccessorTable; }
        }
        
        public const int SkillidFieldNumber = 1;
        private bool hasSkillid;
        private int skillid_;
        public bool HasSkillid {
          get { return hasSkillid; }
        }
        public int Skillid {
          get { return skillid_; }
        }
        
        public const int IslockFieldNumber = 2;
        private bool hasIslock;
        private bool islock_;
        public bool HasIslock {
          get { return hasIslock; }
        }
        public bool Islock {
          get { return islock_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasSkillid) return false;
            if (!hasIslock) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _esotericaSkillFieldNames;
          if (hasSkillid) {
            output.WriteInt32(1, field_names[1], Skillid);
          }
          if (hasIslock) {
            output.WriteBool(2, field_names[0], Islock);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasSkillid) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, Skillid);
          }
          if (hasIslock) {
            size += pb::CodedOutputStream.ComputeBoolSize(2, Islock);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static EsotericaSkill ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EsotericaSkill ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EsotericaSkill ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EsotericaSkill ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EsotericaSkill ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EsotericaSkill ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static EsotericaSkill ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static EsotericaSkill ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static EsotericaSkill ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EsotericaSkill ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private EsotericaSkill MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(EsotericaSkill prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<EsotericaSkill, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(EsotericaSkill cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private EsotericaSkill result;
          
          private EsotericaSkill PrepareBuilder() {
            if (resultIsReadOnly) {
              EsotericaSkill original = result;
              result = new EsotericaSkill();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override EsotericaSkill MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Protocol.S2COnePet.Types.EsotericaSkill.Descriptor; }
          }
          
          public override EsotericaSkill DefaultInstanceForType {
            get { return global::Protocol.S2COnePet.Types.EsotericaSkill.DefaultInstance; }
          }
          
          public override EsotericaSkill BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is EsotericaSkill) {
              return MergeFrom((EsotericaSkill) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(EsotericaSkill other) {
            if (other == global::Protocol.S2COnePet.Types.EsotericaSkill.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasSkillid) {
              Skillid = other.Skillid;
            }
            if (other.HasIslock) {
              Islock = other.Islock;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_esotericaSkillFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _esotericaSkillFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasSkillid = input.ReadInt32(ref result.skillid_);
                  break;
                }
                case 16: {
                  result.hasIslock = input.ReadBool(ref result.islock_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasSkillid {
            get { return result.hasSkillid; }
          }
          public int Skillid {
            get { return result.Skillid; }
            set { SetSkillid(value); }
          }
          public Builder SetSkillid(int value) {
            PrepareBuilder();
            result.hasSkillid = true;
            result.skillid_ = value;
            return this;
          }
          public Builder ClearSkillid() {
            PrepareBuilder();
            result.hasSkillid = false;
            result.skillid_ = 0;
            return this;
          }
          
          public bool HasIslock {
            get { return result.hasIslock; }
          }
          public bool Islock {
            get { return result.Islock; }
            set { SetIslock(value); }
          }
          public Builder SetIslock(bool value) {
            PrepareBuilder();
            result.hasIslock = true;
            result.islock_ = value;
            return this;
          }
          public Builder ClearIslock() {
            PrepareBuilder();
            result.hasIslock = false;
            result.islock_ = false;
            return this;
          }
        }
        static EsotericaSkill() {
          object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int SidFieldNumber = 2;
    private bool hasSid;
    private int sid_;
    public bool HasSid {
      get { return hasSid; }
    }
    public int Sid {
      get { return sid_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ExpFieldNumber = 4;
    private bool hasExp;
    private int exp_;
    public bool HasExp {
      get { return hasExp; }
    }
    public int Exp {
      get { return exp_; }
    }
    
    public const int HpFieldNumber = 5;
    private bool hasHp;
    private int hp_;
    public bool HasHp {
      get { return hasHp; }
    }
    public int Hp {
      get { return hp_; }
    }
    
    public const int LvFieldNumber = 6;
    private bool hasLv;
    private int lv_;
    public bool HasLv {
      get { return hasLv; }
    }
    public int Lv {
      get { return lv_; }
    }
    
    public const int AtkFieldNumber = 7;
    private bool hasAtk;
    private int atk_;
    public bool HasAtk {
      get { return hasAtk; }
    }
    public int Atk {
      get { return atk_; }
    }
    
    public const int MatkFieldNumber = 8;
    private bool hasMatk;
    private int matk_;
    public bool HasMatk {
      get { return hasMatk; }
    }
    public int Matk {
      get { return matk_; }
    }
    
    public const int DefFieldNumber = 9;
    private bool hasDef;
    private int def_;
    public bool HasDef {
      get { return hasDef; }
    }
    public int Def {
      get { return def_; }
    }
    
    public const int MdefFieldNumber = 10;
    private bool hasMdef;
    private int mdef_;
    public bool HasMdef {
      get { return hasMdef; }
    }
    public int Mdef {
      get { return mdef_; }
    }
    
    public const int SpeedFieldNumber = 11;
    private bool hasSpeed;
    private int speed_;
    public bool HasSpeed {
      get { return hasSpeed; }
    }
    public int Speed {
      get { return speed_; }
    }
    
    public const int IntimacylvFieldNumber = 12;
    private bool hasIntimacylv;
    private int intimacylv_;
    public bool HasIntimacylv {
      get { return hasIntimacylv; }
    }
    public int Intimacylv {
      get { return intimacylv_; }
    }
    
    public const int IntimacyexpFieldNumber = 13;
    private bool hasIntimacyexp;
    private int intimacyexp_;
    public bool HasIntimacyexp {
      get { return hasIntimacyexp; }
    }
    public int Intimacyexp {
      get { return intimacyexp_; }
    }
    
    public const int AdvancelvFieldNumber = 14;
    private bool hasAdvancelv;
    private int advancelv_;
    public bool HasAdvancelv {
      get { return hasAdvancelv; }
    }
    public int Advancelv {
      get { return advancelv_; }
    }
    
    public const int FuselvFieldNumber = 15;
    private bool hasFuselv;
    private int fuselv_;
    public bool HasFuselv {
      get { return hasFuselv; }
    }
    public int Fuselv {
      get { return fuselv_; }
    }
    
    public const int FuseexpFieldNumber = 16;
    private bool hasFuseexp;
    private int fuseexp_;
    public bool HasFuseexp {
      get { return hasFuseexp; }
    }
    public int Fuseexp {
      get { return fuseexp_; }
    }
    
    public const int EquipidFieldNumber = 17;
    private bool hasEquipid;
    private int equipid_;
    public bool HasEquipid {
      get { return hasEquipid; }
    }
    public int Equipid {
      get { return equipid_; }
    }
    
    public const int SkillFieldNumber = 18;
    private pbc::PopsicleList<global::Protocol.S2COnePet.Types.SkillLV> skill_ = new pbc::PopsicleList<global::Protocol.S2COnePet.Types.SkillLV>();
    public scg::IList<global::Protocol.S2COnePet.Types.SkillLV> SkillList {
      get { return skill_; }
    }
    public int SkillCount {
      get { return skill_.Count; }
    }
    public global::Protocol.S2COnePet.Types.SkillLV GetSkill(int index) {
      return skill_[index];
    }
    
    public const int PowerFieldNumber = 19;
    private bool hasPower;
    private int power_;
    public bool HasPower {
      get { return hasPower; }
    }
    public int Power {
      get { return power_; }
    }
    
    public const int CharacterFieldNumber = 20;
    private bool hasCharacter;
    private int character_;
    public bool HasCharacter {
      get { return hasCharacter; }
    }
    public int Character {
      get { return character_; }
    }
    
    public const int TraitFieldNumber = 21;
    private pbc::PopsicleList<int> trait_ = new pbc::PopsicleList<int>();
    public scg::IList<int> TraitList {
      get { return pbc::Lists.AsReadOnly(trait_); }
    }
    public int TraitCount {
      get { return trait_.Count; }
    }
    public int GetTrait(int index) {
      return trait_[index];
    }
    
    public const int EskilllistFieldNumber = 22;
    private pbc::PopsicleList<global::Protocol.S2COnePet.Types.EsotericaSkill> eskilllist_ = new pbc::PopsicleList<global::Protocol.S2COnePet.Types.EsotericaSkill>();
    public scg::IList<global::Protocol.S2COnePet.Types.EsotericaSkill> EskilllistList {
      get { return eskilllist_; }
    }
    public int EskilllistCount {
      get { return eskilllist_.Count; }
    }
    public global::Protocol.S2COnePet.Types.EsotericaSkill GetEskilllist(int index) {
      return eskilllist_[index];
    }
    
    public const int IslockFieldNumber = 23;
    private bool hasIslock;
    private bool islock_;
    public bool HasIslock {
      get { return hasIslock; }
    }
    public bool Islock {
      get { return islock_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasSid) return false;
        if (!hasName) return false;
        if (!hasExp) return false;
        if (!hasHp) return false;
        if (!hasLv) return false;
        if (!hasAtk) return false;
        if (!hasMatk) return false;
        if (!hasDef) return false;
        if (!hasMdef) return false;
        if (!hasSpeed) return false;
        if (!hasPower) return false;
        if (!hasCharacter) return false;
        if (!hasIslock) return false;
        foreach (global::Protocol.S2COnePet.Types.SkillLV element in SkillList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Protocol.S2COnePet.Types.EsotericaSkill element in EskilllistList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2COnePetFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[10], Id);
      }
      if (hasSid) {
        output.WriteInt32(2, field_names[19], Sid);
      }
      if (hasName) {
        output.WriteString(3, field_names[17], Name);
      }
      if (hasExp) {
        output.WriteInt32(4, field_names[6], Exp);
      }
      if (hasHp) {
        output.WriteInt32(5, field_names[9], Hp);
      }
      if (hasLv) {
        output.WriteInt32(6, field_names[14], Lv);
      }
      if (hasAtk) {
        output.WriteInt32(7, field_names[1], Atk);
      }
      if (hasMatk) {
        output.WriteInt32(8, field_names[15], Matk);
      }
      if (hasDef) {
        output.WriteInt32(9, field_names[3], Def);
      }
      if (hasMdef) {
        output.WriteInt32(10, field_names[16], Mdef);
      }
      if (hasSpeed) {
        output.WriteInt32(11, field_names[21], Speed);
      }
      if (hasIntimacylv) {
        output.WriteInt32(12, field_names[12], Intimacylv);
      }
      if (hasIntimacyexp) {
        output.WriteInt32(13, field_names[11], Intimacyexp);
      }
      if (hasAdvancelv) {
        output.WriteInt32(14, field_names[0], Advancelv);
      }
      if (hasFuselv) {
        output.WriteInt32(15, field_names[8], Fuselv);
      }
      if (hasFuseexp) {
        output.WriteInt32(16, field_names[7], Fuseexp);
      }
      if (hasEquipid) {
        output.WriteInt32(17, field_names[4], Equipid);
      }
      if (skill_.Count > 0) {
        output.WriteMessageArray(18, field_names[20], skill_);
      }
      if (hasPower) {
        output.WriteInt32(19, field_names[18], Power);
      }
      if (hasCharacter) {
        output.WriteInt32(20, field_names[2], Character);
      }
      if (trait_.Count > 0) {
        output.WriteInt32Array(21, field_names[22], trait_);
      }
      if (eskilllist_.Count > 0) {
        output.WriteMessageArray(22, field_names[5], eskilllist_);
      }
      if (hasIslock) {
        output.WriteBool(23, field_names[13], Islock);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasSid) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Sid);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      if (hasExp) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Exp);
      }
      if (hasHp) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Hp);
      }
      if (hasLv) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Lv);
      }
      if (hasAtk) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Atk);
      }
      if (hasMatk) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, Matk);
      }
      if (hasDef) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, Def);
      }
      if (hasMdef) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, Mdef);
      }
      if (hasSpeed) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, Speed);
      }
      if (hasIntimacylv) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, Intimacylv);
      }
      if (hasIntimacyexp) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, Intimacyexp);
      }
      if (hasAdvancelv) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, Advancelv);
      }
      if (hasFuselv) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, Fuselv);
      }
      if (hasFuseexp) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, Fuseexp);
      }
      if (hasEquipid) {
        size += pb::CodedOutputStream.ComputeInt32Size(17, Equipid);
      }
      foreach (global::Protocol.S2COnePet.Types.SkillLV element in SkillList) {
        size += pb::CodedOutputStream.ComputeMessageSize(18, element);
      }
      if (hasPower) {
        size += pb::CodedOutputStream.ComputeInt32Size(19, Power);
      }
      if (hasCharacter) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, Character);
      }
      {
        int dataSize = 0;
        foreach (int element in TraitList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * trait_.Count;
      }
      foreach (global::Protocol.S2COnePet.Types.EsotericaSkill element in EskilllistList) {
        size += pb::CodedOutputStream.ComputeMessageSize(22, element);
      }
      if (hasIslock) {
        size += pb::CodedOutputStream.ComputeBoolSize(23, Islock);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2COnePet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2COnePet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2COnePet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2COnePet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2COnePet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2COnePet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2COnePet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2COnePet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2COnePet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2COnePet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2COnePet MakeReadOnly() {
      skill_.MakeReadOnly();
      trait_.MakeReadOnly();
      eskilllist_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2COnePet prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2COnePet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2COnePet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2COnePet result;
      
      private S2COnePet PrepareBuilder() {
        if (resultIsReadOnly) {
          S2COnePet original = result;
          result = new S2COnePet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2COnePet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2COnePet.Descriptor; }
      }
      
      public override S2COnePet DefaultInstanceForType {
        get { return global::Protocol.S2COnePet.DefaultInstance; }
      }
      
      public override S2COnePet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2COnePet) {
          return MergeFrom((S2COnePet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2COnePet other) {
        if (other == global::Protocol.S2COnePet.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSid) {
          Sid = other.Sid;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasExp) {
          Exp = other.Exp;
        }
        if (other.HasHp) {
          Hp = other.Hp;
        }
        if (other.HasLv) {
          Lv = other.Lv;
        }
        if (other.HasAtk) {
          Atk = other.Atk;
        }
        if (other.HasMatk) {
          Matk = other.Matk;
        }
        if (other.HasDef) {
          Def = other.Def;
        }
        if (other.HasMdef) {
          Mdef = other.Mdef;
        }
        if (other.HasSpeed) {
          Speed = other.Speed;
        }
        if (other.HasIntimacylv) {
          Intimacylv = other.Intimacylv;
        }
        if (other.HasIntimacyexp) {
          Intimacyexp = other.Intimacyexp;
        }
        if (other.HasAdvancelv) {
          Advancelv = other.Advancelv;
        }
        if (other.HasFuselv) {
          Fuselv = other.Fuselv;
        }
        if (other.HasFuseexp) {
          Fuseexp = other.Fuseexp;
        }
        if (other.HasEquipid) {
          Equipid = other.Equipid;
        }
        if (other.skill_.Count != 0) {
          result.skill_.Add(other.skill_);
        }
        if (other.HasPower) {
          Power = other.Power;
        }
        if (other.HasCharacter) {
          Character = other.Character;
        }
        if (other.trait_.Count != 0) {
          result.trait_.Add(other.trait_);
        }
        if (other.eskilllist_.Count != 0) {
          result.eskilllist_.Add(other.eskilllist_);
        }
        if (other.HasIslock) {
          Islock = other.Islock;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2COnePetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2COnePetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasSid = input.ReadInt32(ref result.sid_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 32: {
              result.hasExp = input.ReadInt32(ref result.exp_);
              break;
            }
            case 40: {
              result.hasHp = input.ReadInt32(ref result.hp_);
              break;
            }
            case 48: {
              result.hasLv = input.ReadInt32(ref result.lv_);
              break;
            }
            case 56: {
              result.hasAtk = input.ReadInt32(ref result.atk_);
              break;
            }
            case 64: {
              result.hasMatk = input.ReadInt32(ref result.matk_);
              break;
            }
            case 72: {
              result.hasDef = input.ReadInt32(ref result.def_);
              break;
            }
            case 80: {
              result.hasMdef = input.ReadInt32(ref result.mdef_);
              break;
            }
            case 88: {
              result.hasSpeed = input.ReadInt32(ref result.speed_);
              break;
            }
            case 96: {
              result.hasIntimacylv = input.ReadInt32(ref result.intimacylv_);
              break;
            }
            case 104: {
              result.hasIntimacyexp = input.ReadInt32(ref result.intimacyexp_);
              break;
            }
            case 112: {
              result.hasAdvancelv = input.ReadInt32(ref result.advancelv_);
              break;
            }
            case 120: {
              result.hasFuselv = input.ReadInt32(ref result.fuselv_);
              break;
            }
            case 128: {
              result.hasFuseexp = input.ReadInt32(ref result.fuseexp_);
              break;
            }
            case 136: {
              result.hasEquipid = input.ReadInt32(ref result.equipid_);
              break;
            }
            case 146: {
              input.ReadMessageArray(tag, field_name, result.skill_, global::Protocol.S2COnePet.Types.SkillLV.DefaultInstance, extensionRegistry);
              break;
            }
            case 152: {
              result.hasPower = input.ReadInt32(ref result.power_);
              break;
            }
            case 160: {
              result.hasCharacter = input.ReadInt32(ref result.character_);
              break;
            }
            case 170:
            case 168: {
              input.ReadInt32Array(tag, field_name, result.trait_);
              break;
            }
            case 178: {
              input.ReadMessageArray(tag, field_name, result.eskilllist_, global::Protocol.S2COnePet.Types.EsotericaSkill.DefaultInstance, extensionRegistry);
              break;
            }
            case 184: {
              result.hasIslock = input.ReadBool(ref result.islock_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasSid {
        get { return result.hasSid; }
      }
      public int Sid {
        get { return result.Sid; }
        set { SetSid(value); }
      }
      public Builder SetSid(int value) {
        PrepareBuilder();
        result.hasSid = true;
        result.sid_ = value;
        return this;
      }
      public Builder ClearSid() {
        PrepareBuilder();
        result.hasSid = false;
        result.sid_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasExp {
        get { return result.hasExp; }
      }
      public int Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(int value) {
        PrepareBuilder();
        result.hasExp = true;
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.hasExp = false;
        result.exp_ = 0;
        return this;
      }
      
      public bool HasHp {
        get { return result.hasHp; }
      }
      public int Hp {
        get { return result.Hp; }
        set { SetHp(value); }
      }
      public Builder SetHp(int value) {
        PrepareBuilder();
        result.hasHp = true;
        result.hp_ = value;
        return this;
      }
      public Builder ClearHp() {
        PrepareBuilder();
        result.hasHp = false;
        result.hp_ = 0;
        return this;
      }
      
      public bool HasLv {
        get { return result.hasLv; }
      }
      public int Lv {
        get { return result.Lv; }
        set { SetLv(value); }
      }
      public Builder SetLv(int value) {
        PrepareBuilder();
        result.hasLv = true;
        result.lv_ = value;
        return this;
      }
      public Builder ClearLv() {
        PrepareBuilder();
        result.hasLv = false;
        result.lv_ = 0;
        return this;
      }
      
      public bool HasAtk {
        get { return result.hasAtk; }
      }
      public int Atk {
        get { return result.Atk; }
        set { SetAtk(value); }
      }
      public Builder SetAtk(int value) {
        PrepareBuilder();
        result.hasAtk = true;
        result.atk_ = value;
        return this;
      }
      public Builder ClearAtk() {
        PrepareBuilder();
        result.hasAtk = false;
        result.atk_ = 0;
        return this;
      }
      
      public bool HasMatk {
        get { return result.hasMatk; }
      }
      public int Matk {
        get { return result.Matk; }
        set { SetMatk(value); }
      }
      public Builder SetMatk(int value) {
        PrepareBuilder();
        result.hasMatk = true;
        result.matk_ = value;
        return this;
      }
      public Builder ClearMatk() {
        PrepareBuilder();
        result.hasMatk = false;
        result.matk_ = 0;
        return this;
      }
      
      public bool HasDef {
        get { return result.hasDef; }
      }
      public int Def {
        get { return result.Def; }
        set { SetDef(value); }
      }
      public Builder SetDef(int value) {
        PrepareBuilder();
        result.hasDef = true;
        result.def_ = value;
        return this;
      }
      public Builder ClearDef() {
        PrepareBuilder();
        result.hasDef = false;
        result.def_ = 0;
        return this;
      }
      
      public bool HasMdef {
        get { return result.hasMdef; }
      }
      public int Mdef {
        get { return result.Mdef; }
        set { SetMdef(value); }
      }
      public Builder SetMdef(int value) {
        PrepareBuilder();
        result.hasMdef = true;
        result.mdef_ = value;
        return this;
      }
      public Builder ClearMdef() {
        PrepareBuilder();
        result.hasMdef = false;
        result.mdef_ = 0;
        return this;
      }
      
      public bool HasSpeed {
        get { return result.hasSpeed; }
      }
      public int Speed {
        get { return result.Speed; }
        set { SetSpeed(value); }
      }
      public Builder SetSpeed(int value) {
        PrepareBuilder();
        result.hasSpeed = true;
        result.speed_ = value;
        return this;
      }
      public Builder ClearSpeed() {
        PrepareBuilder();
        result.hasSpeed = false;
        result.speed_ = 0;
        return this;
      }
      
      public bool HasIntimacylv {
        get { return result.hasIntimacylv; }
      }
      public int Intimacylv {
        get { return result.Intimacylv; }
        set { SetIntimacylv(value); }
      }
      public Builder SetIntimacylv(int value) {
        PrepareBuilder();
        result.hasIntimacylv = true;
        result.intimacylv_ = value;
        return this;
      }
      public Builder ClearIntimacylv() {
        PrepareBuilder();
        result.hasIntimacylv = false;
        result.intimacylv_ = 0;
        return this;
      }
      
      public bool HasIntimacyexp {
        get { return result.hasIntimacyexp; }
      }
      public int Intimacyexp {
        get { return result.Intimacyexp; }
        set { SetIntimacyexp(value); }
      }
      public Builder SetIntimacyexp(int value) {
        PrepareBuilder();
        result.hasIntimacyexp = true;
        result.intimacyexp_ = value;
        return this;
      }
      public Builder ClearIntimacyexp() {
        PrepareBuilder();
        result.hasIntimacyexp = false;
        result.intimacyexp_ = 0;
        return this;
      }
      
      public bool HasAdvancelv {
        get { return result.hasAdvancelv; }
      }
      public int Advancelv {
        get { return result.Advancelv; }
        set { SetAdvancelv(value); }
      }
      public Builder SetAdvancelv(int value) {
        PrepareBuilder();
        result.hasAdvancelv = true;
        result.advancelv_ = value;
        return this;
      }
      public Builder ClearAdvancelv() {
        PrepareBuilder();
        result.hasAdvancelv = false;
        result.advancelv_ = 0;
        return this;
      }
      
      public bool HasFuselv {
        get { return result.hasFuselv; }
      }
      public int Fuselv {
        get { return result.Fuselv; }
        set { SetFuselv(value); }
      }
      public Builder SetFuselv(int value) {
        PrepareBuilder();
        result.hasFuselv = true;
        result.fuselv_ = value;
        return this;
      }
      public Builder ClearFuselv() {
        PrepareBuilder();
        result.hasFuselv = false;
        result.fuselv_ = 0;
        return this;
      }
      
      public bool HasFuseexp {
        get { return result.hasFuseexp; }
      }
      public int Fuseexp {
        get { return result.Fuseexp; }
        set { SetFuseexp(value); }
      }
      public Builder SetFuseexp(int value) {
        PrepareBuilder();
        result.hasFuseexp = true;
        result.fuseexp_ = value;
        return this;
      }
      public Builder ClearFuseexp() {
        PrepareBuilder();
        result.hasFuseexp = false;
        result.fuseexp_ = 0;
        return this;
      }
      
      public bool HasEquipid {
        get { return result.hasEquipid; }
      }
      public int Equipid {
        get { return result.Equipid; }
        set { SetEquipid(value); }
      }
      public Builder SetEquipid(int value) {
        PrepareBuilder();
        result.hasEquipid = true;
        result.equipid_ = value;
        return this;
      }
      public Builder ClearEquipid() {
        PrepareBuilder();
        result.hasEquipid = false;
        result.equipid_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.S2COnePet.Types.SkillLV> SkillList {
        get { return PrepareBuilder().skill_; }
      }
      public int SkillCount {
        get { return result.SkillCount; }
      }
      public global::Protocol.S2COnePet.Types.SkillLV GetSkill(int index) {
        return result.GetSkill(index);
      }
      public Builder SetSkill(int index, global::Protocol.S2COnePet.Types.SkillLV value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skill_[index] = value;
        return this;
      }
      public Builder SetSkill(int index, global::Protocol.S2COnePet.Types.SkillLV.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skill_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSkill(global::Protocol.S2COnePet.Types.SkillLV value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skill_.Add(value);
        return this;
      }
      public Builder AddSkill(global::Protocol.S2COnePet.Types.SkillLV.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skill_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSkill(scg::IEnumerable<global::Protocol.S2COnePet.Types.SkillLV> values) {
        PrepareBuilder();
        result.skill_.Add(values);
        return this;
      }
      public Builder ClearSkill() {
        PrepareBuilder();
        result.skill_.Clear();
        return this;
      }
      
      public bool HasPower {
        get { return result.hasPower; }
      }
      public int Power {
        get { return result.Power; }
        set { SetPower(value); }
      }
      public Builder SetPower(int value) {
        PrepareBuilder();
        result.hasPower = true;
        result.power_ = value;
        return this;
      }
      public Builder ClearPower() {
        PrepareBuilder();
        result.hasPower = false;
        result.power_ = 0;
        return this;
      }
      
      public bool HasCharacter {
        get { return result.hasCharacter; }
      }
      public int Character {
        get { return result.Character; }
        set { SetCharacter(value); }
      }
      public Builder SetCharacter(int value) {
        PrepareBuilder();
        result.hasCharacter = true;
        result.character_ = value;
        return this;
      }
      public Builder ClearCharacter() {
        PrepareBuilder();
        result.hasCharacter = false;
        result.character_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> TraitList {
        get { return PrepareBuilder().trait_; }
      }
      public int TraitCount {
        get { return result.TraitCount; }
      }
      public int GetTrait(int index) {
        return result.GetTrait(index);
      }
      public Builder SetTrait(int index, int value) {
        PrepareBuilder();
        result.trait_[index] = value;
        return this;
      }
      public Builder AddTrait(int value) {
        PrepareBuilder();
        result.trait_.Add(value);
        return this;
      }
      public Builder AddRangeTrait(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.trait_.Add(values);
        return this;
      }
      public Builder ClearTrait() {
        PrepareBuilder();
        result.trait_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.S2COnePet.Types.EsotericaSkill> EskilllistList {
        get { return PrepareBuilder().eskilllist_; }
      }
      public int EskilllistCount {
        get { return result.EskilllistCount; }
      }
      public global::Protocol.S2COnePet.Types.EsotericaSkill GetEskilllist(int index) {
        return result.GetEskilllist(index);
      }
      public Builder SetEskilllist(int index, global::Protocol.S2COnePet.Types.EsotericaSkill value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.eskilllist_[index] = value;
        return this;
      }
      public Builder SetEskilllist(int index, global::Protocol.S2COnePet.Types.EsotericaSkill.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.eskilllist_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEskilllist(global::Protocol.S2COnePet.Types.EsotericaSkill value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.eskilllist_.Add(value);
        return this;
      }
      public Builder AddEskilllist(global::Protocol.S2COnePet.Types.EsotericaSkill.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.eskilllist_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEskilllist(scg::IEnumerable<global::Protocol.S2COnePet.Types.EsotericaSkill> values) {
        PrepareBuilder();
        result.eskilllist_.Add(values);
        return this;
      }
      public Builder ClearEskilllist() {
        PrepareBuilder();
        result.eskilllist_.Clear();
        return this;
      }
      
      public bool HasIslock {
        get { return result.hasIslock; }
      }
      public bool Islock {
        get { return result.Islock; }
        set { SetIslock(value); }
      }
      public Builder SetIslock(bool value) {
        PrepareBuilder();
        result.hasIslock = true;
        result.islock_ = value;
        return this;
      }
      public Builder ClearIslock() {
        PrepareBuilder();
        result.hasIslock = false;
        result.islock_ = false;
        return this;
      }
    }
    static S2COnePet() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CAddPet : pb::GeneratedMessage<S2CAddPet, S2CAddPet.Builder> {
    private S2CAddPet() { }
    private static readonly S2CAddPet defaultInstance = new S2CAddPet().MakeReadOnly();
    private static readonly string[] _s2CAddPetFieldNames = new string[] { "addpet" };
    private static readonly uint[] _s2CAddPetFieldTags = new uint[] { 10 };
    public static S2CAddPet DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CAddPet DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CAddPet ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CAddPet__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CAddPet, S2CAddPet.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CAddPet__FieldAccessorTable; }
    }
    
    public const int AddpetFieldNumber = 1;
    private bool hasAddpet;
    private global::Protocol.S2COnePet addpet_;
    public bool HasAddpet {
      get { return hasAddpet; }
    }
    public global::Protocol.S2COnePet Addpet {
      get { return addpet_ ?? global::Protocol.S2COnePet.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddpet) return false;
        if (!Addpet.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CAddPetFieldNames;
      if (hasAddpet) {
        output.WriteMessage(1, field_names[0], Addpet);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAddpet) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Addpet);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CAddPet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CAddPet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CAddPet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CAddPet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CAddPet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CAddPet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CAddPet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CAddPet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CAddPet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CAddPet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CAddPet MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CAddPet prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CAddPet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CAddPet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CAddPet result;
      
      private S2CAddPet PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CAddPet original = result;
          result = new S2CAddPet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CAddPet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CAddPet.Descriptor; }
      }
      
      public override S2CAddPet DefaultInstanceForType {
        get { return global::Protocol.S2CAddPet.DefaultInstance; }
      }
      
      public override S2CAddPet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CAddPet) {
          return MergeFrom((S2CAddPet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CAddPet other) {
        if (other == global::Protocol.S2CAddPet.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddpet) {
          MergeAddpet(other.Addpet);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CAddPetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CAddPetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Protocol.S2COnePet.Builder subBuilder = global::Protocol.S2COnePet.CreateBuilder();
              if (result.hasAddpet) {
                subBuilder.MergeFrom(Addpet);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Addpet = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddpet {
       get { return result.hasAddpet; }
      }
      public global::Protocol.S2COnePet Addpet {
        get { return result.Addpet; }
        set { SetAddpet(value); }
      }
      public Builder SetAddpet(global::Protocol.S2COnePet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAddpet = true;
        result.addpet_ = value;
        return this;
      }
      public Builder SetAddpet(global::Protocol.S2COnePet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAddpet = true;
        result.addpet_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAddpet(global::Protocol.S2COnePet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAddpet &&
            result.addpet_ != global::Protocol.S2COnePet.DefaultInstance) {
            result.addpet_ = global::Protocol.S2COnePet.CreateBuilder(result.addpet_).MergeFrom(value).BuildPartial();
        } else {
          result.addpet_ = value;
        }
        result.hasAddpet = true;
        return this;
      }
      public Builder ClearAddpet() {
        PrepareBuilder();
        result.hasAddpet = false;
        result.addpet_ = null;
        return this;
      }
    }
    static S2CAddPet() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CMorePet : pb::GeneratedMessage<S2CMorePet, S2CMorePet.Builder> {
    private S2CMorePet() { }
    private static readonly S2CMorePet defaultInstance = new S2CMorePet().MakeReadOnly();
    private static readonly string[] _s2CMorePetFieldNames = new string[] { "pets" };
    private static readonly uint[] _s2CMorePetFieldTags = new uint[] { 10 };
    public static S2CMorePet DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CMorePet DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CMorePet ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CMorePet__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CMorePet, S2CMorePet.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CMorePet__FieldAccessorTable; }
    }
    
    public const int PetsFieldNumber = 1;
    private pbc::PopsicleList<global::Protocol.S2COnePet> pets_ = new pbc::PopsicleList<global::Protocol.S2COnePet>();
    public scg::IList<global::Protocol.S2COnePet> PetsList {
      get { return pets_; }
    }
    public int PetsCount {
      get { return pets_.Count; }
    }
    public global::Protocol.S2COnePet GetPets(int index) {
      return pets_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Protocol.S2COnePet element in PetsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CMorePetFieldNames;
      if (pets_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], pets_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Protocol.S2COnePet element in PetsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CMorePet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CMorePet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CMorePet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CMorePet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CMorePet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CMorePet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CMorePet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CMorePet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CMorePet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CMorePet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CMorePet MakeReadOnly() {
      pets_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CMorePet prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CMorePet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CMorePet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CMorePet result;
      
      private S2CMorePet PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CMorePet original = result;
          result = new S2CMorePet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CMorePet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CMorePet.Descriptor; }
      }
      
      public override S2CMorePet DefaultInstanceForType {
        get { return global::Protocol.S2CMorePet.DefaultInstance; }
      }
      
      public override S2CMorePet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CMorePet) {
          return MergeFrom((S2CMorePet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CMorePet other) {
        if (other == global::Protocol.S2CMorePet.DefaultInstance) return this;
        PrepareBuilder();
        if (other.pets_.Count != 0) {
          result.pets_.Add(other.pets_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CMorePetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CMorePetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.pets_, global::Protocol.S2COnePet.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Protocol.S2COnePet> PetsList {
        get { return PrepareBuilder().pets_; }
      }
      public int PetsCount {
        get { return result.PetsCount; }
      }
      public global::Protocol.S2COnePet GetPets(int index) {
        return result.GetPets(index);
      }
      public Builder SetPets(int index, global::Protocol.S2COnePet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.pets_[index] = value;
        return this;
      }
      public Builder SetPets(int index, global::Protocol.S2COnePet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.pets_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPets(global::Protocol.S2COnePet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.pets_.Add(value);
        return this;
      }
      public Builder AddPets(global::Protocol.S2COnePet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.pets_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePets(scg::IEnumerable<global::Protocol.S2COnePet> values) {
        PrepareBuilder();
        result.pets_.Add(values);
        return this;
      }
      public Builder ClearPets() {
        PrepareBuilder();
        result.pets_.Clear();
        return this;
      }
    }
    static S2CMorePet() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CUpdateOnePet : pb::GeneratedMessage<S2CUpdateOnePet, S2CUpdateOnePet.Builder> {
    private S2CUpdateOnePet() { }
    private static readonly S2CUpdateOnePet defaultInstance = new S2CUpdateOnePet().MakeReadOnly();
    private static readonly string[] _s2CUpdateOnePetFieldNames = new string[] { "updatepet" };
    private static readonly uint[] _s2CUpdateOnePetFieldTags = new uint[] { 10 };
    public static S2CUpdateOnePet DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CUpdateOnePet DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CUpdateOnePet ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateOnePet__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CUpdateOnePet, S2CUpdateOnePet.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateOnePet__FieldAccessorTable; }
    }
    
    public const int UpdatepetFieldNumber = 1;
    private bool hasUpdatepet;
    private global::Protocol.S2COnePet updatepet_;
    public bool HasUpdatepet {
      get { return hasUpdatepet; }
    }
    public global::Protocol.S2COnePet Updatepet {
      get { return updatepet_ ?? global::Protocol.S2COnePet.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUpdatepet) return false;
        if (!Updatepet.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CUpdateOnePetFieldNames;
      if (hasUpdatepet) {
        output.WriteMessage(1, field_names[0], Updatepet);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUpdatepet) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Updatepet);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CUpdateOnePet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdateOnePet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateOnePet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdateOnePet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateOnePet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdateOnePet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateOnePet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CUpdateOnePet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CUpdateOnePet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdateOnePet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CUpdateOnePet MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CUpdateOnePet prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CUpdateOnePet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CUpdateOnePet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CUpdateOnePet result;
      
      private S2CUpdateOnePet PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CUpdateOnePet original = result;
          result = new S2CUpdateOnePet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CUpdateOnePet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CUpdateOnePet.Descriptor; }
      }
      
      public override S2CUpdateOnePet DefaultInstanceForType {
        get { return global::Protocol.S2CUpdateOnePet.DefaultInstance; }
      }
      
      public override S2CUpdateOnePet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CUpdateOnePet) {
          return MergeFrom((S2CUpdateOnePet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CUpdateOnePet other) {
        if (other == global::Protocol.S2CUpdateOnePet.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUpdatepet) {
          MergeUpdatepet(other.Updatepet);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CUpdateOnePetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CUpdateOnePetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Protocol.S2COnePet.Builder subBuilder = global::Protocol.S2COnePet.CreateBuilder();
              if (result.hasUpdatepet) {
                subBuilder.MergeFrom(Updatepet);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Updatepet = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUpdatepet {
       get { return result.hasUpdatepet; }
      }
      public global::Protocol.S2COnePet Updatepet {
        get { return result.Updatepet; }
        set { SetUpdatepet(value); }
      }
      public Builder SetUpdatepet(global::Protocol.S2COnePet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUpdatepet = true;
        result.updatepet_ = value;
        return this;
      }
      public Builder SetUpdatepet(global::Protocol.S2COnePet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUpdatepet = true;
        result.updatepet_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUpdatepet(global::Protocol.S2COnePet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUpdatepet &&
            result.updatepet_ != global::Protocol.S2COnePet.DefaultInstance) {
            result.updatepet_ = global::Protocol.S2COnePet.CreateBuilder(result.updatepet_).MergeFrom(value).BuildPartial();
        } else {
          result.updatepet_ = value;
        }
        result.hasUpdatepet = true;
        return this;
      }
      public Builder ClearUpdatepet() {
        PrepareBuilder();
        result.hasUpdatepet = false;
        result.updatepet_ = null;
        return this;
      }
    }
    static S2CUpdateOnePet() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CUpdatePetOneData : pb::GeneratedMessage<S2CUpdatePetOneData, S2CUpdatePetOneData.Builder> {
    private S2CUpdatePetOneData() { }
    private static readonly S2CUpdatePetOneData defaultInstance = new S2CUpdatePetOneData().MakeReadOnly();
    private static readonly string[] _s2CUpdatePetOneDataFieldNames = new string[] { "id", "number", "value" };
    private static readonly uint[] _s2CUpdatePetOneDataFieldTags = new uint[] { 8, 16, 24 };
    public static S2CUpdatePetOneData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CUpdatePetOneData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CUpdatePetOneData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdatePetOneData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CUpdatePetOneData, S2CUpdatePetOneData.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdatePetOneData__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NumberFieldNumber = 2;
    private bool hasNumber;
    private int number_;
    public bool HasNumber {
      get { return hasNumber; }
    }
    public int Number {
      get { return number_; }
    }
    
    public const int ValueFieldNumber = 3;
    private bool hasValue;
    private int value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public int Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasNumber) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CUpdatePetOneDataFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasNumber) {
        output.WriteInt32(2, field_names[1], Number);
      }
      if (hasValue) {
        output.WriteInt32(3, field_names[2], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasNumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Number);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Value);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CUpdatePetOneData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdatePetOneData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdatePetOneData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdatePetOneData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdatePetOneData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdatePetOneData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdatePetOneData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CUpdatePetOneData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CUpdatePetOneData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdatePetOneData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CUpdatePetOneData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CUpdatePetOneData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CUpdatePetOneData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CUpdatePetOneData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CUpdatePetOneData result;
      
      private S2CUpdatePetOneData PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CUpdatePetOneData original = result;
          result = new S2CUpdatePetOneData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CUpdatePetOneData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CUpdatePetOneData.Descriptor; }
      }
      
      public override S2CUpdatePetOneData DefaultInstanceForType {
        get { return global::Protocol.S2CUpdatePetOneData.DefaultInstance; }
      }
      
      public override S2CUpdatePetOneData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CUpdatePetOneData) {
          return MergeFrom((S2CUpdatePetOneData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CUpdatePetOneData other) {
        if (other == global::Protocol.S2CUpdatePetOneData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasNumber) {
          Number = other.Number;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CUpdatePetOneDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CUpdatePetOneDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasNumber = input.ReadInt32(ref result.number_);
              break;
            }
            case 24: {
              result.hasValue = input.ReadInt32(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasNumber {
        get { return result.hasNumber; }
      }
      public int Number {
        get { return result.Number; }
        set { SetNumber(value); }
      }
      public Builder SetNumber(int value) {
        PrepareBuilder();
        result.hasNumber = true;
        result.number_ = value;
        return this;
      }
      public Builder ClearNumber() {
        PrepareBuilder();
        result.hasNumber = false;
        result.number_ = 0;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public int Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(int value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0;
        return this;
      }
    }
    static S2CUpdatePetOneData() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CUpdatePetName : pb::GeneratedMessage<S2CUpdatePetName, S2CUpdatePetName.Builder> {
    private S2CUpdatePetName() { }
    private static readonly S2CUpdatePetName defaultInstance = new S2CUpdatePetName().MakeReadOnly();
    private static readonly string[] _s2CUpdatePetNameFieldNames = new string[] { "id", "name" };
    private static readonly uint[] _s2CUpdatePetNameFieldTags = new uint[] { 8, 18 };
    public static S2CUpdatePetName DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CUpdatePetName DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CUpdatePetName ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdatePetName__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CUpdatePetName, S2CUpdatePetName.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdatePetName__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CUpdatePetNameFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[1], Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CUpdatePetName ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdatePetName ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdatePetName ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdatePetName ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdatePetName ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdatePetName ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdatePetName ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CUpdatePetName ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CUpdatePetName ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdatePetName ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CUpdatePetName MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CUpdatePetName prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CUpdatePetName, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CUpdatePetName cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CUpdatePetName result;
      
      private S2CUpdatePetName PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CUpdatePetName original = result;
          result = new S2CUpdatePetName();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CUpdatePetName MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CUpdatePetName.Descriptor; }
      }
      
      public override S2CUpdatePetName DefaultInstanceForType {
        get { return global::Protocol.S2CUpdatePetName.DefaultInstance; }
      }
      
      public override S2CUpdatePetName BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CUpdatePetName) {
          return MergeFrom((S2CUpdatePetName) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CUpdatePetName other) {
        if (other == global::Protocol.S2CUpdatePetName.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CUpdatePetNameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CUpdatePetNameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static S2CUpdatePetName() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CPetDel : pb::GeneratedMessage<S2CPetDel, S2CPetDel.Builder> {
    private S2CPetDel() { }
    private static readonly S2CPetDel defaultInstance = new S2CPetDel().MakeReadOnly();
    private static readonly string[] _s2CPetDelFieldNames = new string[] { "id" };
    private static readonly uint[] _s2CPetDelFieldTags = new uint[] { 8 };
    public static S2CPetDel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CPetDel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CPetDel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CPetDel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CPetDel, S2CPetDel.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CPetDel__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CPetDelFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CPetDel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CPetDel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CPetDel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CPetDel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CPetDel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CPetDel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CPetDel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CPetDel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CPetDel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CPetDel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CPetDel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CPetDel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CPetDel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CPetDel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CPetDel result;
      
      private S2CPetDel PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CPetDel original = result;
          result = new S2CPetDel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CPetDel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CPetDel.Descriptor; }
      }
      
      public override S2CPetDel DefaultInstanceForType {
        get { return global::Protocol.S2CPetDel.DefaultInstance; }
      }
      
      public override S2CPetDel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CPetDel) {
          return MergeFrom((S2CPetDel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CPetDel other) {
        if (other == global::Protocol.S2CPetDel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CPetDelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CPetDelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static S2CPetDel() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CIntimacyUpdate : pb::GeneratedMessage<S2CIntimacyUpdate, S2CIntimacyUpdate.Builder> {
    private S2CIntimacyUpdate() { }
    private static readonly S2CIntimacyUpdate defaultInstance = new S2CIntimacyUpdate().MakeReadOnly();
    private static readonly string[] _s2CIntimacyUpdateFieldNames = new string[] { "id", "intimacyexp", "intimacylv" };
    private static readonly uint[] _s2CIntimacyUpdateFieldTags = new uint[] { 8, 16, 24 };
    public static S2CIntimacyUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CIntimacyUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CIntimacyUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CIntimacyUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CIntimacyUpdate, S2CIntimacyUpdate.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CIntimacyUpdate__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int IntimacyexpFieldNumber = 2;
    private bool hasIntimacyexp;
    private int intimacyexp_;
    public bool HasIntimacyexp {
      get { return hasIntimacyexp; }
    }
    public int Intimacyexp {
      get { return intimacyexp_; }
    }
    
    public const int IntimacylvFieldNumber = 3;
    private bool hasIntimacylv;
    private int intimacylv_;
    public bool HasIntimacylv {
      get { return hasIntimacylv; }
    }
    public int Intimacylv {
      get { return intimacylv_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasIntimacyexp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CIntimacyUpdateFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasIntimacyexp) {
        output.WriteInt32(2, field_names[1], Intimacyexp);
      }
      if (hasIntimacylv) {
        output.WriteInt32(3, field_names[2], Intimacylv);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasIntimacyexp) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Intimacyexp);
      }
      if (hasIntimacylv) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Intimacylv);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CIntimacyUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CIntimacyUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CIntimacyUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CIntimacyUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CIntimacyUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CIntimacyUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CIntimacyUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CIntimacyUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CIntimacyUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CIntimacyUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CIntimacyUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CIntimacyUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CIntimacyUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CIntimacyUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CIntimacyUpdate result;
      
      private S2CIntimacyUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CIntimacyUpdate original = result;
          result = new S2CIntimacyUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CIntimacyUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CIntimacyUpdate.Descriptor; }
      }
      
      public override S2CIntimacyUpdate DefaultInstanceForType {
        get { return global::Protocol.S2CIntimacyUpdate.DefaultInstance; }
      }
      
      public override S2CIntimacyUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CIntimacyUpdate) {
          return MergeFrom((S2CIntimacyUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CIntimacyUpdate other) {
        if (other == global::Protocol.S2CIntimacyUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasIntimacyexp) {
          Intimacyexp = other.Intimacyexp;
        }
        if (other.HasIntimacylv) {
          Intimacylv = other.Intimacylv;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CIntimacyUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CIntimacyUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasIntimacyexp = input.ReadInt32(ref result.intimacyexp_);
              break;
            }
            case 24: {
              result.hasIntimacylv = input.ReadInt32(ref result.intimacylv_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasIntimacyexp {
        get { return result.hasIntimacyexp; }
      }
      public int Intimacyexp {
        get { return result.Intimacyexp; }
        set { SetIntimacyexp(value); }
      }
      public Builder SetIntimacyexp(int value) {
        PrepareBuilder();
        result.hasIntimacyexp = true;
        result.intimacyexp_ = value;
        return this;
      }
      public Builder ClearIntimacyexp() {
        PrepareBuilder();
        result.hasIntimacyexp = false;
        result.intimacyexp_ = 0;
        return this;
      }
      
      public bool HasIntimacylv {
        get { return result.hasIntimacylv; }
      }
      public int Intimacylv {
        get { return result.Intimacylv; }
        set { SetIntimacylv(value); }
      }
      public Builder SetIntimacylv(int value) {
        PrepareBuilder();
        result.hasIntimacylv = true;
        result.intimacylv_ = value;
        return this;
      }
      public Builder ClearIntimacylv() {
        PrepareBuilder();
        result.hasIntimacylv = false;
        result.intimacylv_ = 0;
        return this;
      }
    }
    static S2CIntimacyUpdate() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CAdvanceUpdate : pb::GeneratedMessage<S2CAdvanceUpdate, S2CAdvanceUpdate.Builder> {
    private S2CAdvanceUpdate() { }
    private static readonly S2CAdvanceUpdate defaultInstance = new S2CAdvanceUpdate().MakeReadOnly();
    private static readonly string[] _s2CAdvanceUpdateFieldNames = new string[] { "advancelv", "id" };
    private static readonly uint[] _s2CAdvanceUpdateFieldTags = new uint[] { 16, 8 };
    public static S2CAdvanceUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CAdvanceUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CAdvanceUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CAdvanceUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CAdvanceUpdate, S2CAdvanceUpdate.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CAdvanceUpdate__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int AdvancelvFieldNumber = 2;
    private bool hasAdvancelv;
    private int advancelv_;
    public bool HasAdvancelv {
      get { return hasAdvancelv; }
    }
    public int Advancelv {
      get { return advancelv_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasAdvancelv) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CAdvanceUpdateFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasAdvancelv) {
        output.WriteInt32(2, field_names[0], Advancelv);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasAdvancelv) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Advancelv);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CAdvanceUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CAdvanceUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CAdvanceUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CAdvanceUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CAdvanceUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CAdvanceUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CAdvanceUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CAdvanceUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CAdvanceUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CAdvanceUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CAdvanceUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CAdvanceUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CAdvanceUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CAdvanceUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CAdvanceUpdate result;
      
      private S2CAdvanceUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CAdvanceUpdate original = result;
          result = new S2CAdvanceUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CAdvanceUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CAdvanceUpdate.Descriptor; }
      }
      
      public override S2CAdvanceUpdate DefaultInstanceForType {
        get { return global::Protocol.S2CAdvanceUpdate.DefaultInstance; }
      }
      
      public override S2CAdvanceUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CAdvanceUpdate) {
          return MergeFrom((S2CAdvanceUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CAdvanceUpdate other) {
        if (other == global::Protocol.S2CAdvanceUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasAdvancelv) {
          Advancelv = other.Advancelv;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CAdvanceUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CAdvanceUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasAdvancelv = input.ReadInt32(ref result.advancelv_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasAdvancelv {
        get { return result.hasAdvancelv; }
      }
      public int Advancelv {
        get { return result.Advancelv; }
        set { SetAdvancelv(value); }
      }
      public Builder SetAdvancelv(int value) {
        PrepareBuilder();
        result.hasAdvancelv = true;
        result.advancelv_ = value;
        return this;
      }
      public Builder ClearAdvancelv() {
        PrepareBuilder();
        result.hasAdvancelv = false;
        result.advancelv_ = 0;
        return this;
      }
    }
    static S2CAdvanceUpdate() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CPetFuseUpdate : pb::GeneratedMessage<S2CPetFuseUpdate, S2CPetFuseUpdate.Builder> {
    private S2CPetFuseUpdate() { }
    private static readonly S2CPetFuseUpdate defaultInstance = new S2CPetFuseUpdate().MakeReadOnly();
    private static readonly string[] _s2CPetFuseUpdateFieldNames = new string[] { "fuseexp", "fuselv", "id" };
    private static readonly uint[] _s2CPetFuseUpdateFieldTags = new uint[] { 16, 24, 8 };
    public static S2CPetFuseUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CPetFuseUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CPetFuseUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CPetFuseUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CPetFuseUpdate, S2CPetFuseUpdate.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CPetFuseUpdate__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int FuseexpFieldNumber = 2;
    private bool hasFuseexp;
    private int fuseexp_;
    public bool HasFuseexp {
      get { return hasFuseexp; }
    }
    public int Fuseexp {
      get { return fuseexp_; }
    }
    
    public const int FuselvFieldNumber = 3;
    private bool hasFuselv;
    private int fuselv_;
    public bool HasFuselv {
      get { return hasFuselv; }
    }
    public int Fuselv {
      get { return fuselv_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasFuseexp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CPetFuseUpdateFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[2], Id);
      }
      if (hasFuseexp) {
        output.WriteInt32(2, field_names[0], Fuseexp);
      }
      if (hasFuselv) {
        output.WriteInt32(3, field_names[1], Fuselv);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasFuseexp) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Fuseexp);
      }
      if (hasFuselv) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Fuselv);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CPetFuseUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CPetFuseUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CPetFuseUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CPetFuseUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CPetFuseUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CPetFuseUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CPetFuseUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CPetFuseUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CPetFuseUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CPetFuseUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CPetFuseUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CPetFuseUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CPetFuseUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CPetFuseUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CPetFuseUpdate result;
      
      private S2CPetFuseUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CPetFuseUpdate original = result;
          result = new S2CPetFuseUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CPetFuseUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CPetFuseUpdate.Descriptor; }
      }
      
      public override S2CPetFuseUpdate DefaultInstanceForType {
        get { return global::Protocol.S2CPetFuseUpdate.DefaultInstance; }
      }
      
      public override S2CPetFuseUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CPetFuseUpdate) {
          return MergeFrom((S2CPetFuseUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CPetFuseUpdate other) {
        if (other == global::Protocol.S2CPetFuseUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasFuseexp) {
          Fuseexp = other.Fuseexp;
        }
        if (other.HasFuselv) {
          Fuselv = other.Fuselv;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CPetFuseUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CPetFuseUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasFuseexp = input.ReadInt32(ref result.fuseexp_);
              break;
            }
            case 24: {
              result.hasFuselv = input.ReadInt32(ref result.fuselv_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasFuseexp {
        get { return result.hasFuseexp; }
      }
      public int Fuseexp {
        get { return result.Fuseexp; }
        set { SetFuseexp(value); }
      }
      public Builder SetFuseexp(int value) {
        PrepareBuilder();
        result.hasFuseexp = true;
        result.fuseexp_ = value;
        return this;
      }
      public Builder ClearFuseexp() {
        PrepareBuilder();
        result.hasFuseexp = false;
        result.fuseexp_ = 0;
        return this;
      }
      
      public bool HasFuselv {
        get { return result.hasFuselv; }
      }
      public int Fuselv {
        get { return result.Fuselv; }
        set { SetFuselv(value); }
      }
      public Builder SetFuselv(int value) {
        PrepareBuilder();
        result.hasFuselv = true;
        result.fuselv_ = value;
        return this;
      }
      public Builder ClearFuselv() {
        PrepareBuilder();
        result.hasFuselv = false;
        result.fuselv_ = 0;
        return this;
      }
    }
    static S2CPetFuseUpdate() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CUpdateEquipID : pb::GeneratedMessage<S2CUpdateEquipID, S2CUpdateEquipID.Builder> {
    private S2CUpdateEquipID() { }
    private static readonly S2CUpdateEquipID defaultInstance = new S2CUpdateEquipID().MakeReadOnly();
    private static readonly string[] _s2CUpdateEquipIDFieldNames = new string[] { "equipid", "id" };
    private static readonly uint[] _s2CUpdateEquipIDFieldTags = new uint[] { 16, 8 };
    public static S2CUpdateEquipID DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CUpdateEquipID DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CUpdateEquipID ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateEquipID__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CUpdateEquipID, S2CUpdateEquipID.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateEquipID__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int EquipidFieldNumber = 2;
    private bool hasEquipid;
    private int equipid_;
    public bool HasEquipid {
      get { return hasEquipid; }
    }
    public int Equipid {
      get { return equipid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasEquipid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CUpdateEquipIDFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasEquipid) {
        output.WriteInt32(2, field_names[0], Equipid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasEquipid) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Equipid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CUpdateEquipID ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdateEquipID ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateEquipID ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdateEquipID ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateEquipID ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdateEquipID ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateEquipID ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CUpdateEquipID ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CUpdateEquipID ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdateEquipID ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CUpdateEquipID MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CUpdateEquipID prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CUpdateEquipID, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CUpdateEquipID cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CUpdateEquipID result;
      
      private S2CUpdateEquipID PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CUpdateEquipID original = result;
          result = new S2CUpdateEquipID();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CUpdateEquipID MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CUpdateEquipID.Descriptor; }
      }
      
      public override S2CUpdateEquipID DefaultInstanceForType {
        get { return global::Protocol.S2CUpdateEquipID.DefaultInstance; }
      }
      
      public override S2CUpdateEquipID BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CUpdateEquipID) {
          return MergeFrom((S2CUpdateEquipID) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CUpdateEquipID other) {
        if (other == global::Protocol.S2CUpdateEquipID.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasEquipid) {
          Equipid = other.Equipid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CUpdateEquipIDFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CUpdateEquipIDFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasEquipid = input.ReadInt32(ref result.equipid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasEquipid {
        get { return result.hasEquipid; }
      }
      public int Equipid {
        get { return result.Equipid; }
        set { SetEquipid(value); }
      }
      public Builder SetEquipid(int value) {
        PrepareBuilder();
        result.hasEquipid = true;
        result.equipid_ = value;
        return this;
      }
      public Builder ClearEquipid() {
        PrepareBuilder();
        result.hasEquipid = false;
        result.equipid_ = 0;
        return this;
      }
    }
    static S2CUpdateEquipID() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CUpdateSkillList : pb::GeneratedMessage<S2CUpdateSkillList, S2CUpdateSkillList.Builder> {
    private S2CUpdateSkillList() { }
    private static readonly S2CUpdateSkillList defaultInstance = new S2CUpdateSkillList().MakeReadOnly();
    private static readonly string[] _s2CUpdateSkillListFieldNames = new string[] { "id", "skill" };
    private static readonly uint[] _s2CUpdateSkillListFieldTags = new uint[] { 8, 18 };
    public static S2CUpdateSkillList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CUpdateSkillList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CUpdateSkillList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateSkillList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CUpdateSkillList, S2CUpdateSkillList.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateSkillList__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int SkillFieldNumber = 2;
    private pbc::PopsicleList<global::Protocol.S2COnePet.Types.SkillLV> skill_ = new pbc::PopsicleList<global::Protocol.S2COnePet.Types.SkillLV>();
    public scg::IList<global::Protocol.S2COnePet.Types.SkillLV> SkillList {
      get { return skill_; }
    }
    public int SkillCount {
      get { return skill_.Count; }
    }
    public global::Protocol.S2COnePet.Types.SkillLV GetSkill(int index) {
      return skill_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        foreach (global::Protocol.S2COnePet.Types.SkillLV element in SkillList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CUpdateSkillListFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (skill_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], skill_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      foreach (global::Protocol.S2COnePet.Types.SkillLV element in SkillList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CUpdateSkillList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdateSkillList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateSkillList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdateSkillList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateSkillList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdateSkillList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateSkillList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CUpdateSkillList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CUpdateSkillList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdateSkillList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CUpdateSkillList MakeReadOnly() {
      skill_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CUpdateSkillList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CUpdateSkillList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CUpdateSkillList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CUpdateSkillList result;
      
      private S2CUpdateSkillList PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CUpdateSkillList original = result;
          result = new S2CUpdateSkillList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CUpdateSkillList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CUpdateSkillList.Descriptor; }
      }
      
      public override S2CUpdateSkillList DefaultInstanceForType {
        get { return global::Protocol.S2CUpdateSkillList.DefaultInstance; }
      }
      
      public override S2CUpdateSkillList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CUpdateSkillList) {
          return MergeFrom((S2CUpdateSkillList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CUpdateSkillList other) {
        if (other == global::Protocol.S2CUpdateSkillList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.skill_.Count != 0) {
          result.skill_.Add(other.skill_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CUpdateSkillListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CUpdateSkillListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.skill_, global::Protocol.S2COnePet.Types.SkillLV.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.S2COnePet.Types.SkillLV> SkillList {
        get { return PrepareBuilder().skill_; }
      }
      public int SkillCount {
        get { return result.SkillCount; }
      }
      public global::Protocol.S2COnePet.Types.SkillLV GetSkill(int index) {
        return result.GetSkill(index);
      }
      public Builder SetSkill(int index, global::Protocol.S2COnePet.Types.SkillLV value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skill_[index] = value;
        return this;
      }
      public Builder SetSkill(int index, global::Protocol.S2COnePet.Types.SkillLV.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skill_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSkill(global::Protocol.S2COnePet.Types.SkillLV value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skill_.Add(value);
        return this;
      }
      public Builder AddSkill(global::Protocol.S2COnePet.Types.SkillLV.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skill_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSkill(scg::IEnumerable<global::Protocol.S2COnePet.Types.SkillLV> values) {
        PrepareBuilder();
        result.skill_.Add(values);
        return this;
      }
      public Builder ClearSkill() {
        PrepareBuilder();
        result.skill_.Clear();
        return this;
      }
    }
    static S2CUpdateSkillList() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CUpdateOneSkill : pb::GeneratedMessage<S2CUpdateOneSkill, S2CUpdateOneSkill.Builder> {
    private S2CUpdateOneSkill() { }
    private static readonly S2CUpdateOneSkill defaultInstance = new S2CUpdateOneSkill().MakeReadOnly();
    private static readonly string[] _s2CUpdateOneSkillFieldNames = new string[] { "id", "lv", "skillid" };
    private static readonly uint[] _s2CUpdateOneSkillFieldTags = new uint[] { 8, 24, 16 };
    public static S2CUpdateOneSkill DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CUpdateOneSkill DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CUpdateOneSkill ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateOneSkill__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CUpdateOneSkill, S2CUpdateOneSkill.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateOneSkill__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int SkillidFieldNumber = 2;
    private bool hasSkillid;
    private int skillid_;
    public bool HasSkillid {
      get { return hasSkillid; }
    }
    public int Skillid {
      get { return skillid_; }
    }
    
    public const int LvFieldNumber = 3;
    private bool hasLv;
    private int lv_;
    public bool HasLv {
      get { return hasLv; }
    }
    public int Lv {
      get { return lv_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasSkillid) return false;
        if (!hasLv) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CUpdateOneSkillFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasSkillid) {
        output.WriteInt32(2, field_names[2], Skillid);
      }
      if (hasLv) {
        output.WriteInt32(3, field_names[1], Lv);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasSkillid) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Skillid);
      }
      if (hasLv) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Lv);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CUpdateOneSkill ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdateOneSkill ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateOneSkill ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdateOneSkill ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateOneSkill ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdateOneSkill ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateOneSkill ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CUpdateOneSkill ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CUpdateOneSkill ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdateOneSkill ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CUpdateOneSkill MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CUpdateOneSkill prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CUpdateOneSkill, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CUpdateOneSkill cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CUpdateOneSkill result;
      
      private S2CUpdateOneSkill PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CUpdateOneSkill original = result;
          result = new S2CUpdateOneSkill();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CUpdateOneSkill MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CUpdateOneSkill.Descriptor; }
      }
      
      public override S2CUpdateOneSkill DefaultInstanceForType {
        get { return global::Protocol.S2CUpdateOneSkill.DefaultInstance; }
      }
      
      public override S2CUpdateOneSkill BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CUpdateOneSkill) {
          return MergeFrom((S2CUpdateOneSkill) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CUpdateOneSkill other) {
        if (other == global::Protocol.S2CUpdateOneSkill.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSkillid) {
          Skillid = other.Skillid;
        }
        if (other.HasLv) {
          Lv = other.Lv;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CUpdateOneSkillFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CUpdateOneSkillFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasSkillid = input.ReadInt32(ref result.skillid_);
              break;
            }
            case 24: {
              result.hasLv = input.ReadInt32(ref result.lv_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasSkillid {
        get { return result.hasSkillid; }
      }
      public int Skillid {
        get { return result.Skillid; }
        set { SetSkillid(value); }
      }
      public Builder SetSkillid(int value) {
        PrepareBuilder();
        result.hasSkillid = true;
        result.skillid_ = value;
        return this;
      }
      public Builder ClearSkillid() {
        PrepareBuilder();
        result.hasSkillid = false;
        result.skillid_ = 0;
        return this;
      }
      
      public bool HasLv {
        get { return result.hasLv; }
      }
      public int Lv {
        get { return result.Lv; }
        set { SetLv(value); }
      }
      public Builder SetLv(int value) {
        PrepareBuilder();
        result.hasLv = true;
        result.lv_ = value;
        return this;
      }
      public Builder ClearLv() {
        PrepareBuilder();
        result.hasLv = false;
        result.lv_ = 0;
        return this;
      }
    }
    static S2CUpdateOneSkill() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CUpdateEsotericaSkillList : pb::GeneratedMessage<S2CUpdateEsotericaSkillList, S2CUpdateEsotericaSkillList.Builder> {
    private S2CUpdateEsotericaSkillList() { }
    private static readonly S2CUpdateEsotericaSkillList defaultInstance = new S2CUpdateEsotericaSkillList().MakeReadOnly();
    private static readonly string[] _s2CUpdateEsotericaSkillListFieldNames = new string[] { "eskilllist", "id" };
    private static readonly uint[] _s2CUpdateEsotericaSkillListFieldTags = new uint[] { 18, 8 };
    public static S2CUpdateEsotericaSkillList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CUpdateEsotericaSkillList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CUpdateEsotericaSkillList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateEsotericaSkillList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CUpdateEsotericaSkillList, S2CUpdateEsotericaSkillList.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateEsotericaSkillList__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int EskilllistFieldNumber = 2;
    private pbc::PopsicleList<global::Protocol.S2COnePet.Types.EsotericaSkill> eskilllist_ = new pbc::PopsicleList<global::Protocol.S2COnePet.Types.EsotericaSkill>();
    public scg::IList<global::Protocol.S2COnePet.Types.EsotericaSkill> EskilllistList {
      get { return eskilllist_; }
    }
    public int EskilllistCount {
      get { return eskilllist_.Count; }
    }
    public global::Protocol.S2COnePet.Types.EsotericaSkill GetEskilllist(int index) {
      return eskilllist_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        foreach (global::Protocol.S2COnePet.Types.EsotericaSkill element in EskilllistList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CUpdateEsotericaSkillListFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (eskilllist_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], eskilllist_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      foreach (global::Protocol.S2COnePet.Types.EsotericaSkill element in EskilllistList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CUpdateEsotericaSkillList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdateEsotericaSkillList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateEsotericaSkillList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdateEsotericaSkillList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateEsotericaSkillList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdateEsotericaSkillList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateEsotericaSkillList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CUpdateEsotericaSkillList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CUpdateEsotericaSkillList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdateEsotericaSkillList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CUpdateEsotericaSkillList MakeReadOnly() {
      eskilllist_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CUpdateEsotericaSkillList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CUpdateEsotericaSkillList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CUpdateEsotericaSkillList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CUpdateEsotericaSkillList result;
      
      private S2CUpdateEsotericaSkillList PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CUpdateEsotericaSkillList original = result;
          result = new S2CUpdateEsotericaSkillList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CUpdateEsotericaSkillList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CUpdateEsotericaSkillList.Descriptor; }
      }
      
      public override S2CUpdateEsotericaSkillList DefaultInstanceForType {
        get { return global::Protocol.S2CUpdateEsotericaSkillList.DefaultInstance; }
      }
      
      public override S2CUpdateEsotericaSkillList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CUpdateEsotericaSkillList) {
          return MergeFrom((S2CUpdateEsotericaSkillList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CUpdateEsotericaSkillList other) {
        if (other == global::Protocol.S2CUpdateEsotericaSkillList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.eskilllist_.Count != 0) {
          result.eskilllist_.Add(other.eskilllist_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CUpdateEsotericaSkillListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CUpdateEsotericaSkillListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.eskilllist_, global::Protocol.S2COnePet.Types.EsotericaSkill.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.S2COnePet.Types.EsotericaSkill> EskilllistList {
        get { return PrepareBuilder().eskilllist_; }
      }
      public int EskilllistCount {
        get { return result.EskilllistCount; }
      }
      public global::Protocol.S2COnePet.Types.EsotericaSkill GetEskilllist(int index) {
        return result.GetEskilllist(index);
      }
      public Builder SetEskilllist(int index, global::Protocol.S2COnePet.Types.EsotericaSkill value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.eskilllist_[index] = value;
        return this;
      }
      public Builder SetEskilllist(int index, global::Protocol.S2COnePet.Types.EsotericaSkill.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.eskilllist_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEskilllist(global::Protocol.S2COnePet.Types.EsotericaSkill value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.eskilllist_.Add(value);
        return this;
      }
      public Builder AddEskilllist(global::Protocol.S2COnePet.Types.EsotericaSkill.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.eskilllist_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEskilllist(scg::IEnumerable<global::Protocol.S2COnePet.Types.EsotericaSkill> values) {
        PrepareBuilder();
        result.eskilllist_.Add(values);
        return this;
      }
      public Builder ClearEskilllist() {
        PrepareBuilder();
        result.eskilllist_.Clear();
        return this;
      }
    }
    static S2CUpdateEsotericaSkillList() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CUpdateIndividualValue : pb::GeneratedMessage<S2CUpdateIndividualValue, S2CUpdateIndividualValue.Builder> {
    private S2CUpdateIndividualValue() { }
    private static readonly S2CUpdateIndividualValue defaultInstance = new S2CUpdateIndividualValue().MakeReadOnly();
    private static readonly string[] _s2CUpdateIndividualValueFieldNames = new string[] { "id", "selfvalue" };
    private static readonly uint[] _s2CUpdateIndividualValueFieldTags = new uint[] { 8, 18 };
    public static S2CUpdateIndividualValue DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CUpdateIndividualValue DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CUpdateIndividualValue ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateIndividualValue__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CUpdateIndividualValue, S2CUpdateIndividualValue.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateIndividualValue__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class OneIndividualValue : pb::GeneratedMessage<OneIndividualValue, OneIndividualValue.Builder> {
        private OneIndividualValue() { }
        private static readonly OneIndividualValue defaultInstance = new OneIndividualValue().MakeReadOnly();
        private static readonly string[] _oneIndividualValueFieldNames = new string[] { "breakoutvalue", "individualvalue", "individualvalueid", "iscanbreakout", "islock" };
        private static readonly uint[] _oneIndividualValueFieldTags = new uint[] { 40, 16, 8, 32, 24 };
        public static OneIndividualValue DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override OneIndividualValue DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override OneIndividualValue ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateIndividualValue_OneIndividualValue__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<OneIndividualValue, OneIndividualValue.Builder> InternalFieldAccessors {
          get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdateIndividualValue_OneIndividualValue__FieldAccessorTable; }
        }
        
        public const int IndividualvalueidFieldNumber = 1;
        private bool hasIndividualvalueid;
        private int individualvalueid_;
        public bool HasIndividualvalueid {
          get { return hasIndividualvalueid; }
        }
        public int Individualvalueid {
          get { return individualvalueid_; }
        }
        
        public const int IndividualvalueFieldNumber = 2;
        private bool hasIndividualvalue;
        private int individualvalue_;
        public bool HasIndividualvalue {
          get { return hasIndividualvalue; }
        }
        public int Individualvalue {
          get { return individualvalue_; }
        }
        
        public const int IslockFieldNumber = 3;
        private bool hasIslock;
        private bool islock_;
        public bool HasIslock {
          get { return hasIslock; }
        }
        public bool Islock {
          get { return islock_; }
        }
        
        public const int IscanbreakoutFieldNumber = 4;
        private bool hasIscanbreakout;
        private bool iscanbreakout_;
        public bool HasIscanbreakout {
          get { return hasIscanbreakout; }
        }
        public bool Iscanbreakout {
          get { return iscanbreakout_; }
        }
        
        public const int BreakoutvalueFieldNumber = 5;
        private bool hasBreakoutvalue;
        private int breakoutvalue_;
        public bool HasBreakoutvalue {
          get { return hasBreakoutvalue; }
        }
        public int Breakoutvalue {
          get { return breakoutvalue_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasIndividualvalueid) return false;
            if (!hasIndividualvalue) return false;
            if (!hasIslock) return false;
            if (!hasIscanbreakout) return false;
            if (!hasBreakoutvalue) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _oneIndividualValueFieldNames;
          if (hasIndividualvalueid) {
            output.WriteInt32(1, field_names[2], Individualvalueid);
          }
          if (hasIndividualvalue) {
            output.WriteInt32(2, field_names[1], Individualvalue);
          }
          if (hasIslock) {
            output.WriteBool(3, field_names[4], Islock);
          }
          if (hasIscanbreakout) {
            output.WriteBool(4, field_names[3], Iscanbreakout);
          }
          if (hasBreakoutvalue) {
            output.WriteInt32(5, field_names[0], Breakoutvalue);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasIndividualvalueid) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, Individualvalueid);
          }
          if (hasIndividualvalue) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Individualvalue);
          }
          if (hasIslock) {
            size += pb::CodedOutputStream.ComputeBoolSize(3, Islock);
          }
          if (hasIscanbreakout) {
            size += pb::CodedOutputStream.ComputeBoolSize(4, Iscanbreakout);
          }
          if (hasBreakoutvalue) {
            size += pb::CodedOutputStream.ComputeInt32Size(5, Breakoutvalue);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static OneIndividualValue ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static OneIndividualValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static OneIndividualValue ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static OneIndividualValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static OneIndividualValue ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static OneIndividualValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static OneIndividualValue ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static OneIndividualValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static OneIndividualValue ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static OneIndividualValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private OneIndividualValue MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(OneIndividualValue prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<OneIndividualValue, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(OneIndividualValue cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private OneIndividualValue result;
          
          private OneIndividualValue PrepareBuilder() {
            if (resultIsReadOnly) {
              OneIndividualValue original = result;
              result = new OneIndividualValue();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override OneIndividualValue MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue.Descriptor; }
          }
          
          public override OneIndividualValue DefaultInstanceForType {
            get { return global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue.DefaultInstance; }
          }
          
          public override OneIndividualValue BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is OneIndividualValue) {
              return MergeFrom((OneIndividualValue) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(OneIndividualValue other) {
            if (other == global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasIndividualvalueid) {
              Individualvalueid = other.Individualvalueid;
            }
            if (other.HasIndividualvalue) {
              Individualvalue = other.Individualvalue;
            }
            if (other.HasIslock) {
              Islock = other.Islock;
            }
            if (other.HasIscanbreakout) {
              Iscanbreakout = other.Iscanbreakout;
            }
            if (other.HasBreakoutvalue) {
              Breakoutvalue = other.Breakoutvalue;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_oneIndividualValueFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _oneIndividualValueFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasIndividualvalueid = input.ReadInt32(ref result.individualvalueid_);
                  break;
                }
                case 16: {
                  result.hasIndividualvalue = input.ReadInt32(ref result.individualvalue_);
                  break;
                }
                case 24: {
                  result.hasIslock = input.ReadBool(ref result.islock_);
                  break;
                }
                case 32: {
                  result.hasIscanbreakout = input.ReadBool(ref result.iscanbreakout_);
                  break;
                }
                case 40: {
                  result.hasBreakoutvalue = input.ReadInt32(ref result.breakoutvalue_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasIndividualvalueid {
            get { return result.hasIndividualvalueid; }
          }
          public int Individualvalueid {
            get { return result.Individualvalueid; }
            set { SetIndividualvalueid(value); }
          }
          public Builder SetIndividualvalueid(int value) {
            PrepareBuilder();
            result.hasIndividualvalueid = true;
            result.individualvalueid_ = value;
            return this;
          }
          public Builder ClearIndividualvalueid() {
            PrepareBuilder();
            result.hasIndividualvalueid = false;
            result.individualvalueid_ = 0;
            return this;
          }
          
          public bool HasIndividualvalue {
            get { return result.hasIndividualvalue; }
          }
          public int Individualvalue {
            get { return result.Individualvalue; }
            set { SetIndividualvalue(value); }
          }
          public Builder SetIndividualvalue(int value) {
            PrepareBuilder();
            result.hasIndividualvalue = true;
            result.individualvalue_ = value;
            return this;
          }
          public Builder ClearIndividualvalue() {
            PrepareBuilder();
            result.hasIndividualvalue = false;
            result.individualvalue_ = 0;
            return this;
          }
          
          public bool HasIslock {
            get { return result.hasIslock; }
          }
          public bool Islock {
            get { return result.Islock; }
            set { SetIslock(value); }
          }
          public Builder SetIslock(bool value) {
            PrepareBuilder();
            result.hasIslock = true;
            result.islock_ = value;
            return this;
          }
          public Builder ClearIslock() {
            PrepareBuilder();
            result.hasIslock = false;
            result.islock_ = false;
            return this;
          }
          
          public bool HasIscanbreakout {
            get { return result.hasIscanbreakout; }
          }
          public bool Iscanbreakout {
            get { return result.Iscanbreakout; }
            set { SetIscanbreakout(value); }
          }
          public Builder SetIscanbreakout(bool value) {
            PrepareBuilder();
            result.hasIscanbreakout = true;
            result.iscanbreakout_ = value;
            return this;
          }
          public Builder ClearIscanbreakout() {
            PrepareBuilder();
            result.hasIscanbreakout = false;
            result.iscanbreakout_ = false;
            return this;
          }
          
          public bool HasBreakoutvalue {
            get { return result.hasBreakoutvalue; }
          }
          public int Breakoutvalue {
            get { return result.Breakoutvalue; }
            set { SetBreakoutvalue(value); }
          }
          public Builder SetBreakoutvalue(int value) {
            PrepareBuilder();
            result.hasBreakoutvalue = true;
            result.breakoutvalue_ = value;
            return this;
          }
          public Builder ClearBreakoutvalue() {
            PrepareBuilder();
            result.hasBreakoutvalue = false;
            result.breakoutvalue_ = 0;
            return this;
          }
        }
        static OneIndividualValue() {
          object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int SelfvalueFieldNumber = 2;
    private pbc::PopsicleList<global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue> selfvalue_ = new pbc::PopsicleList<global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue>();
    public scg::IList<global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue> SelfvalueList {
      get { return selfvalue_; }
    }
    public int SelfvalueCount {
      get { return selfvalue_.Count; }
    }
    public global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue GetSelfvalue(int index) {
      return selfvalue_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        foreach (global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue element in SelfvalueList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CUpdateIndividualValueFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (selfvalue_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], selfvalue_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      foreach (global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue element in SelfvalueList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CUpdateIndividualValue ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdateIndividualValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateIndividualValue ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdateIndividualValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateIndividualValue ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdateIndividualValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdateIndividualValue ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CUpdateIndividualValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CUpdateIndividualValue ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdateIndividualValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CUpdateIndividualValue MakeReadOnly() {
      selfvalue_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CUpdateIndividualValue prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CUpdateIndividualValue, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CUpdateIndividualValue cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CUpdateIndividualValue result;
      
      private S2CUpdateIndividualValue PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CUpdateIndividualValue original = result;
          result = new S2CUpdateIndividualValue();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CUpdateIndividualValue MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CUpdateIndividualValue.Descriptor; }
      }
      
      public override S2CUpdateIndividualValue DefaultInstanceForType {
        get { return global::Protocol.S2CUpdateIndividualValue.DefaultInstance; }
      }
      
      public override S2CUpdateIndividualValue BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CUpdateIndividualValue) {
          return MergeFrom((S2CUpdateIndividualValue) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CUpdateIndividualValue other) {
        if (other == global::Protocol.S2CUpdateIndividualValue.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.selfvalue_.Count != 0) {
          result.selfvalue_.Add(other.selfvalue_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CUpdateIndividualValueFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CUpdateIndividualValueFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.selfvalue_, global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue> SelfvalueList {
        get { return PrepareBuilder().selfvalue_; }
      }
      public int SelfvalueCount {
        get { return result.SelfvalueCount; }
      }
      public global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue GetSelfvalue(int index) {
        return result.GetSelfvalue(index);
      }
      public Builder SetSelfvalue(int index, global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.selfvalue_[index] = value;
        return this;
      }
      public Builder SetSelfvalue(int index, global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.selfvalue_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSelfvalue(global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.selfvalue_.Add(value);
        return this;
      }
      public Builder AddSelfvalue(global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.selfvalue_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSelfvalue(scg::IEnumerable<global::Protocol.S2CUpdateIndividualValue.Types.OneIndividualValue> values) {
        PrepareBuilder();
        result.selfvalue_.Add(values);
        return this;
      }
      public Builder ClearSelfvalue() {
        PrepareBuilder();
        result.selfvalue_.Clear();
        return this;
      }
    }
    static S2CUpdateIndividualValue() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CUpdatePetLockStatus : pb::GeneratedMessage<S2CUpdatePetLockStatus, S2CUpdatePetLockStatus.Builder> {
    private S2CUpdatePetLockStatus() { }
    private static readonly S2CUpdatePetLockStatus defaultInstance = new S2CUpdatePetLockStatus().MakeReadOnly();
    private static readonly string[] _s2CUpdatePetLockStatusFieldNames = new string[] { "id", "islock" };
    private static readonly uint[] _s2CUpdatePetLockStatusFieldTags = new uint[] { 8, 16 };
    public static S2CUpdatePetLockStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CUpdatePetLockStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CUpdatePetLockStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdatePetLockStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CUpdatePetLockStatus, S2CUpdatePetLockStatus.Builder> InternalFieldAccessors {
      get { return global::Protocol.Pet.internal__static_Protocol_S2CUpdatePetLockStatus__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int IslockFieldNumber = 2;
    private bool hasIslock;
    private bool islock_;
    public bool HasIslock {
      get { return hasIslock; }
    }
    public bool Islock {
      get { return islock_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasIslock) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CUpdatePetLockStatusFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasIslock) {
        output.WriteBool(2, field_names[1], Islock);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasIslock) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Islock);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CUpdatePetLockStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdatePetLockStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdatePetLockStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CUpdatePetLockStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdatePetLockStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdatePetLockStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CUpdatePetLockStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CUpdatePetLockStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CUpdatePetLockStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CUpdatePetLockStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CUpdatePetLockStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CUpdatePetLockStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CUpdatePetLockStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CUpdatePetLockStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CUpdatePetLockStatus result;
      
      private S2CUpdatePetLockStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CUpdatePetLockStatus original = result;
          result = new S2CUpdatePetLockStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CUpdatePetLockStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CUpdatePetLockStatus.Descriptor; }
      }
      
      public override S2CUpdatePetLockStatus DefaultInstanceForType {
        get { return global::Protocol.S2CUpdatePetLockStatus.DefaultInstance; }
      }
      
      public override S2CUpdatePetLockStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CUpdatePetLockStatus) {
          return MergeFrom((S2CUpdatePetLockStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CUpdatePetLockStatus other) {
        if (other == global::Protocol.S2CUpdatePetLockStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasIslock) {
          Islock = other.Islock;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CUpdatePetLockStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CUpdatePetLockStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasIslock = input.ReadBool(ref result.islock_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasIslock {
        get { return result.hasIslock; }
      }
      public bool Islock {
        get { return result.Islock; }
        set { SetIslock(value); }
      }
      public Builder SetIslock(bool value) {
        PrepareBuilder();
        result.hasIslock = true;
        result.islock_ = value;
        return this;
      }
      public Builder ClearIslock() {
        PrepareBuilder();
        result.hasIslock = false;
        result.islock_ = false;
        return this;
      }
    }
    static S2CUpdatePetLockStatus() {
      object.ReferenceEquals(global::Protocol.Pet.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
