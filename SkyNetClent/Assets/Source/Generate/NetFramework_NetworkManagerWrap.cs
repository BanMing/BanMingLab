//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetFramework_NetworkManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NetFramework.NetworkManager), typeof(System.Object));
		L.RegFunction("SetLuaDispatchMsgAction", SetLuaDispatchMsgAction);
		L.RegFunction("DispatchSocketMsg", DispatchSocketMsg);
		L.RegFunction("SetEncry", SetEncry);
		L.RegFunction("AddEvent", AddEvent);
		L.RegFunction("Update", Update);
		L.RegFunction("HandlePack", HandlePack);
		L.RegFunction("SendConnect", SendConnect);
		L.RegFunction("SendMessage", SendMessage);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("New", _CreateNetFramework_NetworkManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("isOpenEncry", get_isOpenEncry, set_isOpenEncry);
		L.RegVar("isEncryOffsetEnable", get_isEncryOffsetEnable, set_isEncryOffsetEnable);
		L.RegVar("s_protoNumberLen", get_s_protoNumberLen, set_s_protoNumberLen);
		L.RegVar("s_PackLen", get_s_PackLen, set_s_PackLen);
		L.RegVar("SocketClient", get_SocketClient, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNetFramework_NetworkManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NetFramework.NetworkManager obj = new NetFramework.NetworkManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NetFramework.NetworkManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLuaDispatchMsgAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			NetFramework.NetworkManager.SetLuaDispatchMsgAction(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DispatchSocketMsg(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<LuaInterface.LuaByteBuffer>(L, 3))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				LuaByteBuffer arg2 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 3));
				NetFramework.NetworkManager.DispatchSocketMsg(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<byte[]>(L, 3))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 3);
				NetFramework.NetworkManager.DispatchSocketMsg(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NetFramework.NetworkManager.DispatchSocketMsg");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEncry(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetFramework.NetworkManager obj = (NetFramework.NetworkManager)ToLua.CheckObject<NetFramework.NetworkManager>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetEncry(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			NetFramework.NetworkManager.AddEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetFramework.NetworkManager obj = (NetFramework.NetworkManager)ToLua.CheckObject<NetFramework.NetworkManager>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HandlePack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetFramework.NetworkManager obj = (NetFramework.NetworkManager)ToLua.CheckObject<NetFramework.NetworkManager>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
			obj.HandlePack(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendConnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetFramework.NetworkManager obj = (NetFramework.NetworkManager)ToLua.CheckObject<NetFramework.NetworkManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SendConnect(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			NetFramework.NetworkManager obj = (NetFramework.NetworkManager)ToLua.CheckObject<NetFramework.NetworkManager>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
			obj.SendMessage(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetFramework.NetworkManager obj = (NetFramework.NetworkManager)ToLua.CheckObject<NetFramework.NetworkManager>(L, 1);
			obj.OnDestroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isOpenEncry(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, NetFramework.NetworkManager.isOpenEncry);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isEncryOffsetEnable(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, NetFramework.NetworkManager.isEncryOffsetEnable);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_s_protoNumberLen(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NetFramework.NetworkManager.s_protoNumberLen);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_s_PackLen(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NetFramework.NetworkManager.s_PackLen);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SocketClient(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetFramework.NetworkManager obj = (NetFramework.NetworkManager)o;
			NetFramework.SocketClient ret = obj.SocketClient;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SocketClient on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isOpenEncry(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			NetFramework.NetworkManager.isOpenEncry = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isEncryOffsetEnable(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			NetFramework.NetworkManager.isEncryOffsetEnable = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_s_protoNumberLen(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NetFramework.NetworkManager.s_protoNumberLen = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_s_PackLen(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NetFramework.NetworkManager.s_PackLen = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

