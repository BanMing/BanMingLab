// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Base {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SLogin__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SLogin, global::Protocol.C2SLogin.Builder> internal__static_Protocol_C2SLogin__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_C2SExpPoolValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SExpPoolValue, global::Protocol.C2SExpPoolValue.Builder> internal__static_Protocol_C2SExpPoolValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CHello__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CHello, global::Protocol.S2CHello.Builder> internal__static_Protocol_S2CHello__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CLoginSuccess__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CLoginSuccess, global::Protocol.S2CLoginSuccess.Builder> internal__static_Protocol_S2CLoginSuccess__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_S2CExpPoolValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CExpPoolValue, global::Protocol.S2CExpPoolValue.Builder> internal__static_Protocol_S2CExpPoolValue__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Base() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpCYXNlLnByb3RvEghQcm90b2NvbCJLCghDMlNMb2dpbhIPCgdhY2NvdW50", 
            "GAEgAigJEgsKA3B3ZBgCIAIoCRIUCgxzZXJ2ZXJudW1iZXIYAyACKAUSCwoD", 
            "bWFjGAQgASgJIh0KD0MyU0V4cFBvb2xWYWx1ZRIKCgJpZBgBIAIoAyIwCghT", 
            "MkNIZWxsbxIQCghyYW5kc2VlZBgBIAIoBRISCgpzZXJ2ZXJ0aW1lGAIgAigF", 
            "IrMBCg9TMkNMb2dpblN1Y2Nlc3MSCgoCaWQYASACKAMSDAoEbmFtZRgCIAIo", 
            "CRIUCgxzZXJ2ZXJudW1iZXIYAyACKAUSDQoFc2hhcGUYBCACKAUSCgoCbHYY", 
            "BSACKAUSCwoDZXhwGAYgAigDEgwKBGdvbGQYByACKAMSCwoDZ2VtGAggAigD", 
            "EgsKA3ZpdBgJIAIoBRILCgN2aXAYCiACKAUSEwoLZm9sbG93cGV0aWQYCyAC", 
          "KAUiJwoPUzJDRXhwUG9vbFZhbHVlEhQKDGV4cHBvb2x2YWx1ZRgBIAIoBQ=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Protocol_C2SLogin__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Protocol_C2SLogin__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SLogin, global::Protocol.C2SLogin.Builder>(internal__static_Protocol_C2SLogin__Descriptor,
                new string[] { "Account", "Pwd", "Servernumber", "Mac", });
        internal__static_Protocol_C2SExpPoolValue__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Protocol_C2SExpPoolValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.C2SExpPoolValue, global::Protocol.C2SExpPoolValue.Builder>(internal__static_Protocol_C2SExpPoolValue__Descriptor,
                new string[] { "Id", });
        internal__static_Protocol_S2CHello__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Protocol_S2CHello__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CHello, global::Protocol.S2CHello.Builder>(internal__static_Protocol_S2CHello__Descriptor,
                new string[] { "Randseed", "Servertime", });
        internal__static_Protocol_S2CLoginSuccess__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Protocol_S2CLoginSuccess__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CLoginSuccess, global::Protocol.S2CLoginSuccess.Builder>(internal__static_Protocol_S2CLoginSuccess__Descriptor,
                new string[] { "Id", "Name", "Servernumber", "Shape", "Lv", "Exp", "Gold", "Gem", "Vit", "Vip", "Followpetid", });
        internal__static_Protocol_S2CExpPoolValue__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Protocol_S2CExpPoolValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.S2CExpPoolValue, global::Protocol.S2CExpPoolValue.Builder>(internal__static_Protocol_S2CExpPoolValue__Descriptor,
                new string[] { "Exppoolvalue", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SLogin : pb::GeneratedMessage<C2SLogin, C2SLogin.Builder> {
    private C2SLogin() { }
    private static readonly C2SLogin defaultInstance = new C2SLogin().MakeReadOnly();
    private static readonly string[] _c2SLoginFieldNames = new string[] { "account", "mac", "pwd", "servernumber" };
    private static readonly uint[] _c2SLoginFieldTags = new uint[] { 10, 34, 18, 24 };
    public static C2SLogin DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SLogin DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SLogin ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Base.internal__static_Protocol_C2SLogin__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SLogin, C2SLogin.Builder> InternalFieldAccessors {
      get { return global::Protocol.Base.internal__static_Protocol_C2SLogin__FieldAccessorTable; }
    }
    
    public const int AccountFieldNumber = 1;
    private bool hasAccount;
    private string account_ = "";
    public bool HasAccount {
      get { return hasAccount; }
    }
    public string Account {
      get { return account_; }
    }
    
    public const int PwdFieldNumber = 2;
    private bool hasPwd;
    private string pwd_ = "";
    public bool HasPwd {
      get { return hasPwd; }
    }
    public string Pwd {
      get { return pwd_; }
    }
    
    public const int ServernumberFieldNumber = 3;
    private bool hasServernumber;
    private int servernumber_;
    public bool HasServernumber {
      get { return hasServernumber; }
    }
    public int Servernumber {
      get { return servernumber_; }
    }
    
    public const int MacFieldNumber = 4;
    private bool hasMac;
    private string mac_ = "";
    public bool HasMac {
      get { return hasMac; }
    }
    public string Mac {
      get { return mac_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccount) return false;
        if (!hasPwd) return false;
        if (!hasServernumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SLoginFieldNames;
      if (hasAccount) {
        output.WriteString(1, field_names[0], Account);
      }
      if (hasPwd) {
        output.WriteString(2, field_names[2], Pwd);
      }
      if (hasServernumber) {
        output.WriteInt32(3, field_names[3], Servernumber);
      }
      if (hasMac) {
        output.WriteString(4, field_names[1], Mac);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccount) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Account);
      }
      if (hasPwd) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Pwd);
      }
      if (hasServernumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Servernumber);
      }
      if (hasMac) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Mac);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SLogin ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SLogin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SLogin ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SLogin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SLogin ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SLogin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SLogin ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SLogin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SLogin ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SLogin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SLogin MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SLogin prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SLogin, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SLogin cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SLogin result;
      
      private C2SLogin PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SLogin original = result;
          result = new C2SLogin();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SLogin MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SLogin.Descriptor; }
      }
      
      public override C2SLogin DefaultInstanceForType {
        get { return global::Protocol.C2SLogin.DefaultInstance; }
      }
      
      public override C2SLogin BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SLogin) {
          return MergeFrom((C2SLogin) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SLogin other) {
        if (other == global::Protocol.C2SLogin.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccount) {
          Account = other.Account;
        }
        if (other.HasPwd) {
          Pwd = other.Pwd;
        }
        if (other.HasServernumber) {
          Servernumber = other.Servernumber;
        }
        if (other.HasMac) {
          Mac = other.Mac;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SLoginFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SLoginFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAccount = input.ReadString(ref result.account_);
              break;
            }
            case 18: {
              result.hasPwd = input.ReadString(ref result.pwd_);
              break;
            }
            case 24: {
              result.hasServernumber = input.ReadInt32(ref result.servernumber_);
              break;
            }
            case 34: {
              result.hasMac = input.ReadString(ref result.mac_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccount {
        get { return result.hasAccount; }
      }
      public string Account {
        get { return result.Account; }
        set { SetAccount(value); }
      }
      public Builder SetAccount(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccount = true;
        result.account_ = value;
        return this;
      }
      public Builder ClearAccount() {
        PrepareBuilder();
        result.hasAccount = false;
        result.account_ = "";
        return this;
      }
      
      public bool HasPwd {
        get { return result.hasPwd; }
      }
      public string Pwd {
        get { return result.Pwd; }
        set { SetPwd(value); }
      }
      public Builder SetPwd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPwd = true;
        result.pwd_ = value;
        return this;
      }
      public Builder ClearPwd() {
        PrepareBuilder();
        result.hasPwd = false;
        result.pwd_ = "";
        return this;
      }
      
      public bool HasServernumber {
        get { return result.hasServernumber; }
      }
      public int Servernumber {
        get { return result.Servernumber; }
        set { SetServernumber(value); }
      }
      public Builder SetServernumber(int value) {
        PrepareBuilder();
        result.hasServernumber = true;
        result.servernumber_ = value;
        return this;
      }
      public Builder ClearServernumber() {
        PrepareBuilder();
        result.hasServernumber = false;
        result.servernumber_ = 0;
        return this;
      }
      
      public bool HasMac {
        get { return result.hasMac; }
      }
      public string Mac {
        get { return result.Mac; }
        set { SetMac(value); }
      }
      public Builder SetMac(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMac = true;
        result.mac_ = value;
        return this;
      }
      public Builder ClearMac() {
        PrepareBuilder();
        result.hasMac = false;
        result.mac_ = "";
        return this;
      }
    }
    static C2SLogin() {
      object.ReferenceEquals(global::Protocol.Base.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2SExpPoolValue : pb::GeneratedMessage<C2SExpPoolValue, C2SExpPoolValue.Builder> {
    private C2SExpPoolValue() { }
    private static readonly C2SExpPoolValue defaultInstance = new C2SExpPoolValue().MakeReadOnly();
    private static readonly string[] _c2SExpPoolValueFieldNames = new string[] { "id" };
    private static readonly uint[] _c2SExpPoolValueFieldTags = new uint[] { 8 };
    public static C2SExpPoolValue DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2SExpPoolValue DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2SExpPoolValue ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Base.internal__static_Protocol_C2SExpPoolValue__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2SExpPoolValue, C2SExpPoolValue.Builder> InternalFieldAccessors {
      get { return global::Protocol.Base.internal__static_Protocol_C2SExpPoolValue__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private long id_;
    public bool HasId {
      get { return hasId; }
    }
    public long Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SExpPoolValueFieldNames;
      if (hasId) {
        output.WriteInt64(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2SExpPoolValue ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SExpPoolValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SExpPoolValue ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2SExpPoolValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2SExpPoolValue ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SExpPoolValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2SExpPoolValue ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2SExpPoolValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2SExpPoolValue ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2SExpPoolValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2SExpPoolValue MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2SExpPoolValue prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2SExpPoolValue, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2SExpPoolValue cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2SExpPoolValue result;
      
      private C2SExpPoolValue PrepareBuilder() {
        if (resultIsReadOnly) {
          C2SExpPoolValue original = result;
          result = new C2SExpPoolValue();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2SExpPoolValue MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.C2SExpPoolValue.Descriptor; }
      }
      
      public override C2SExpPoolValue DefaultInstanceForType {
        get { return global::Protocol.C2SExpPoolValue.DefaultInstance; }
      }
      
      public override C2SExpPoolValue BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2SExpPoolValue) {
          return MergeFrom((C2SExpPoolValue) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2SExpPoolValue other) {
        if (other == global::Protocol.C2SExpPoolValue.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SExpPoolValueFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SExpPoolValueFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt64(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public long Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(long value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0L;
        return this;
      }
    }
    static C2SExpPoolValue() {
      object.ReferenceEquals(global::Protocol.Base.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CHello : pb::GeneratedMessage<S2CHello, S2CHello.Builder> {
    private S2CHello() { }
    private static readonly S2CHello defaultInstance = new S2CHello().MakeReadOnly();
    private static readonly string[] _s2CHelloFieldNames = new string[] { "randseed", "servertime" };
    private static readonly uint[] _s2CHelloFieldTags = new uint[] { 8, 16 };
    public static S2CHello DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CHello DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CHello ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Base.internal__static_Protocol_S2CHello__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CHello, S2CHello.Builder> InternalFieldAccessors {
      get { return global::Protocol.Base.internal__static_Protocol_S2CHello__FieldAccessorTable; }
    }
    
    public const int RandseedFieldNumber = 1;
    private bool hasRandseed;
    private int randseed_;
    public bool HasRandseed {
      get { return hasRandseed; }
    }
    public int Randseed {
      get { return randseed_; }
    }
    
    public const int ServertimeFieldNumber = 2;
    private bool hasServertime;
    private int servertime_;
    public bool HasServertime {
      get { return hasServertime; }
    }
    public int Servertime {
      get { return servertime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRandseed) return false;
        if (!hasServertime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CHelloFieldNames;
      if (hasRandseed) {
        output.WriteInt32(1, field_names[0], Randseed);
      }
      if (hasServertime) {
        output.WriteInt32(2, field_names[1], Servertime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRandseed) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Randseed);
      }
      if (hasServertime) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Servertime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CHello ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CHello ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CHello ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CHello ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CHello ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CHello ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CHello ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CHello ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CHello ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CHello ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CHello MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CHello prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CHello, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CHello cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CHello result;
      
      private S2CHello PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CHello original = result;
          result = new S2CHello();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CHello MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CHello.Descriptor; }
      }
      
      public override S2CHello DefaultInstanceForType {
        get { return global::Protocol.S2CHello.DefaultInstance; }
      }
      
      public override S2CHello BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CHello) {
          return MergeFrom((S2CHello) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CHello other) {
        if (other == global::Protocol.S2CHello.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRandseed) {
          Randseed = other.Randseed;
        }
        if (other.HasServertime) {
          Servertime = other.Servertime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CHelloFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CHelloFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRandseed = input.ReadInt32(ref result.randseed_);
              break;
            }
            case 16: {
              result.hasServertime = input.ReadInt32(ref result.servertime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRandseed {
        get { return result.hasRandseed; }
      }
      public int Randseed {
        get { return result.Randseed; }
        set { SetRandseed(value); }
      }
      public Builder SetRandseed(int value) {
        PrepareBuilder();
        result.hasRandseed = true;
        result.randseed_ = value;
        return this;
      }
      public Builder ClearRandseed() {
        PrepareBuilder();
        result.hasRandseed = false;
        result.randseed_ = 0;
        return this;
      }
      
      public bool HasServertime {
        get { return result.hasServertime; }
      }
      public int Servertime {
        get { return result.Servertime; }
        set { SetServertime(value); }
      }
      public Builder SetServertime(int value) {
        PrepareBuilder();
        result.hasServertime = true;
        result.servertime_ = value;
        return this;
      }
      public Builder ClearServertime() {
        PrepareBuilder();
        result.hasServertime = false;
        result.servertime_ = 0;
        return this;
      }
    }
    static S2CHello() {
      object.ReferenceEquals(global::Protocol.Base.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CLoginSuccess : pb::GeneratedMessage<S2CLoginSuccess, S2CLoginSuccess.Builder> {
    private S2CLoginSuccess() { }
    private static readonly S2CLoginSuccess defaultInstance = new S2CLoginSuccess().MakeReadOnly();
    private static readonly string[] _s2CLoginSuccessFieldNames = new string[] { "exp", "followpetid", "gem", "gold", "id", "lv", "name", "servernumber", "shape", "vip", "vit" };
    private static readonly uint[] _s2CLoginSuccessFieldTags = new uint[] { 48, 88, 64, 56, 8, 40, 18, 24, 32, 80, 72 };
    public static S2CLoginSuccess DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CLoginSuccess DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CLoginSuccess ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Base.internal__static_Protocol_S2CLoginSuccess__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CLoginSuccess, S2CLoginSuccess.Builder> InternalFieldAccessors {
      get { return global::Protocol.Base.internal__static_Protocol_S2CLoginSuccess__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private long id_;
    public bool HasId {
      get { return hasId; }
    }
    public long Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ServernumberFieldNumber = 3;
    private bool hasServernumber;
    private int servernumber_;
    public bool HasServernumber {
      get { return hasServernumber; }
    }
    public int Servernumber {
      get { return servernumber_; }
    }
    
    public const int ShapeFieldNumber = 4;
    private bool hasShape;
    private int shape_;
    public bool HasShape {
      get { return hasShape; }
    }
    public int Shape {
      get { return shape_; }
    }
    
    public const int LvFieldNumber = 5;
    private bool hasLv;
    private int lv_;
    public bool HasLv {
      get { return hasLv; }
    }
    public int Lv {
      get { return lv_; }
    }
    
    public const int ExpFieldNumber = 6;
    private bool hasExp;
    private long exp_;
    public bool HasExp {
      get { return hasExp; }
    }
    public long Exp {
      get { return exp_; }
    }
    
    public const int GoldFieldNumber = 7;
    private bool hasGold;
    private long gold_;
    public bool HasGold {
      get { return hasGold; }
    }
    public long Gold {
      get { return gold_; }
    }
    
    public const int GemFieldNumber = 8;
    private bool hasGem;
    private long gem_;
    public bool HasGem {
      get { return hasGem; }
    }
    public long Gem {
      get { return gem_; }
    }
    
    public const int VitFieldNumber = 9;
    private bool hasVit;
    private int vit_;
    public bool HasVit {
      get { return hasVit; }
    }
    public int Vit {
      get { return vit_; }
    }
    
    public const int VipFieldNumber = 10;
    private bool hasVip;
    private int vip_;
    public bool HasVip {
      get { return hasVip; }
    }
    public int Vip {
      get { return vip_; }
    }
    
    public const int FollowpetidFieldNumber = 11;
    private bool hasFollowpetid;
    private int followpetid_;
    public bool HasFollowpetid {
      get { return hasFollowpetid; }
    }
    public int Followpetid {
      get { return followpetid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        if (!hasServernumber) return false;
        if (!hasShape) return false;
        if (!hasLv) return false;
        if (!hasExp) return false;
        if (!hasGold) return false;
        if (!hasGem) return false;
        if (!hasVit) return false;
        if (!hasVip) return false;
        if (!hasFollowpetid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CLoginSuccessFieldNames;
      if (hasId) {
        output.WriteInt64(1, field_names[4], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[6], Name);
      }
      if (hasServernumber) {
        output.WriteInt32(3, field_names[7], Servernumber);
      }
      if (hasShape) {
        output.WriteInt32(4, field_names[8], Shape);
      }
      if (hasLv) {
        output.WriteInt32(5, field_names[5], Lv);
      }
      if (hasExp) {
        output.WriteInt64(6, field_names[0], Exp);
      }
      if (hasGold) {
        output.WriteInt64(7, field_names[3], Gold);
      }
      if (hasGem) {
        output.WriteInt64(8, field_names[2], Gem);
      }
      if (hasVit) {
        output.WriteInt32(9, field_names[10], Vit);
      }
      if (hasVip) {
        output.WriteInt32(10, field_names[9], Vip);
      }
      if (hasFollowpetid) {
        output.WriteInt32(11, field_names[1], Followpetid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasServernumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Servernumber);
      }
      if (hasShape) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Shape);
      }
      if (hasLv) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Lv);
      }
      if (hasExp) {
        size += pb::CodedOutputStream.ComputeInt64Size(6, Exp);
      }
      if (hasGold) {
        size += pb::CodedOutputStream.ComputeInt64Size(7, Gold);
      }
      if (hasGem) {
        size += pb::CodedOutputStream.ComputeInt64Size(8, Gem);
      }
      if (hasVit) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, Vit);
      }
      if (hasVip) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, Vip);
      }
      if (hasFollowpetid) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, Followpetid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CLoginSuccess ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CLoginSuccess ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CLoginSuccess ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CLoginSuccess ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CLoginSuccess ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CLoginSuccess ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CLoginSuccess ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CLoginSuccess ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CLoginSuccess ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CLoginSuccess ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CLoginSuccess MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CLoginSuccess prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CLoginSuccess, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CLoginSuccess cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CLoginSuccess result;
      
      private S2CLoginSuccess PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CLoginSuccess original = result;
          result = new S2CLoginSuccess();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CLoginSuccess MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CLoginSuccess.Descriptor; }
      }
      
      public override S2CLoginSuccess DefaultInstanceForType {
        get { return global::Protocol.S2CLoginSuccess.DefaultInstance; }
      }
      
      public override S2CLoginSuccess BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CLoginSuccess) {
          return MergeFrom((S2CLoginSuccess) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CLoginSuccess other) {
        if (other == global::Protocol.S2CLoginSuccess.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasServernumber) {
          Servernumber = other.Servernumber;
        }
        if (other.HasShape) {
          Shape = other.Shape;
        }
        if (other.HasLv) {
          Lv = other.Lv;
        }
        if (other.HasExp) {
          Exp = other.Exp;
        }
        if (other.HasGold) {
          Gold = other.Gold;
        }
        if (other.HasGem) {
          Gem = other.Gem;
        }
        if (other.HasVit) {
          Vit = other.Vit;
        }
        if (other.HasVip) {
          Vip = other.Vip;
        }
        if (other.HasFollowpetid) {
          Followpetid = other.Followpetid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CLoginSuccessFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CLoginSuccessFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt64(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              result.hasServernumber = input.ReadInt32(ref result.servernumber_);
              break;
            }
            case 32: {
              result.hasShape = input.ReadInt32(ref result.shape_);
              break;
            }
            case 40: {
              result.hasLv = input.ReadInt32(ref result.lv_);
              break;
            }
            case 48: {
              result.hasExp = input.ReadInt64(ref result.exp_);
              break;
            }
            case 56: {
              result.hasGold = input.ReadInt64(ref result.gold_);
              break;
            }
            case 64: {
              result.hasGem = input.ReadInt64(ref result.gem_);
              break;
            }
            case 72: {
              result.hasVit = input.ReadInt32(ref result.vit_);
              break;
            }
            case 80: {
              result.hasVip = input.ReadInt32(ref result.vip_);
              break;
            }
            case 88: {
              result.hasFollowpetid = input.ReadInt32(ref result.followpetid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public long Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(long value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0L;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasServernumber {
        get { return result.hasServernumber; }
      }
      public int Servernumber {
        get { return result.Servernumber; }
        set { SetServernumber(value); }
      }
      public Builder SetServernumber(int value) {
        PrepareBuilder();
        result.hasServernumber = true;
        result.servernumber_ = value;
        return this;
      }
      public Builder ClearServernumber() {
        PrepareBuilder();
        result.hasServernumber = false;
        result.servernumber_ = 0;
        return this;
      }
      
      public bool HasShape {
        get { return result.hasShape; }
      }
      public int Shape {
        get { return result.Shape; }
        set { SetShape(value); }
      }
      public Builder SetShape(int value) {
        PrepareBuilder();
        result.hasShape = true;
        result.shape_ = value;
        return this;
      }
      public Builder ClearShape() {
        PrepareBuilder();
        result.hasShape = false;
        result.shape_ = 0;
        return this;
      }
      
      public bool HasLv {
        get { return result.hasLv; }
      }
      public int Lv {
        get { return result.Lv; }
        set { SetLv(value); }
      }
      public Builder SetLv(int value) {
        PrepareBuilder();
        result.hasLv = true;
        result.lv_ = value;
        return this;
      }
      public Builder ClearLv() {
        PrepareBuilder();
        result.hasLv = false;
        result.lv_ = 0;
        return this;
      }
      
      public bool HasExp {
        get { return result.hasExp; }
      }
      public long Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(long value) {
        PrepareBuilder();
        result.hasExp = true;
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.hasExp = false;
        result.exp_ = 0L;
        return this;
      }
      
      public bool HasGold {
        get { return result.hasGold; }
      }
      public long Gold {
        get { return result.Gold; }
        set { SetGold(value); }
      }
      public Builder SetGold(long value) {
        PrepareBuilder();
        result.hasGold = true;
        result.gold_ = value;
        return this;
      }
      public Builder ClearGold() {
        PrepareBuilder();
        result.hasGold = false;
        result.gold_ = 0L;
        return this;
      }
      
      public bool HasGem {
        get { return result.hasGem; }
      }
      public long Gem {
        get { return result.Gem; }
        set { SetGem(value); }
      }
      public Builder SetGem(long value) {
        PrepareBuilder();
        result.hasGem = true;
        result.gem_ = value;
        return this;
      }
      public Builder ClearGem() {
        PrepareBuilder();
        result.hasGem = false;
        result.gem_ = 0L;
        return this;
      }
      
      public bool HasVit {
        get { return result.hasVit; }
      }
      public int Vit {
        get { return result.Vit; }
        set { SetVit(value); }
      }
      public Builder SetVit(int value) {
        PrepareBuilder();
        result.hasVit = true;
        result.vit_ = value;
        return this;
      }
      public Builder ClearVit() {
        PrepareBuilder();
        result.hasVit = false;
        result.vit_ = 0;
        return this;
      }
      
      public bool HasVip {
        get { return result.hasVip; }
      }
      public int Vip {
        get { return result.Vip; }
        set { SetVip(value); }
      }
      public Builder SetVip(int value) {
        PrepareBuilder();
        result.hasVip = true;
        result.vip_ = value;
        return this;
      }
      public Builder ClearVip() {
        PrepareBuilder();
        result.hasVip = false;
        result.vip_ = 0;
        return this;
      }
      
      public bool HasFollowpetid {
        get { return result.hasFollowpetid; }
      }
      public int Followpetid {
        get { return result.Followpetid; }
        set { SetFollowpetid(value); }
      }
      public Builder SetFollowpetid(int value) {
        PrepareBuilder();
        result.hasFollowpetid = true;
        result.followpetid_ = value;
        return this;
      }
      public Builder ClearFollowpetid() {
        PrepareBuilder();
        result.hasFollowpetid = false;
        result.followpetid_ = 0;
        return this;
      }
    }
    static S2CLoginSuccess() {
      object.ReferenceEquals(global::Protocol.Base.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2CExpPoolValue : pb::GeneratedMessage<S2CExpPoolValue, S2CExpPoolValue.Builder> {
    private S2CExpPoolValue() { }
    private static readonly S2CExpPoolValue defaultInstance = new S2CExpPoolValue().MakeReadOnly();
    private static readonly string[] _s2CExpPoolValueFieldNames = new string[] { "exppoolvalue" };
    private static readonly uint[] _s2CExpPoolValueFieldTags = new uint[] { 8 };
    public static S2CExpPoolValue DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override S2CExpPoolValue DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override S2CExpPoolValue ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.Base.internal__static_Protocol_S2CExpPoolValue__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<S2CExpPoolValue, S2CExpPoolValue.Builder> InternalFieldAccessors {
      get { return global::Protocol.Base.internal__static_Protocol_S2CExpPoolValue__FieldAccessorTable; }
    }
    
    public const int ExppoolvalueFieldNumber = 1;
    private bool hasExppoolvalue;
    private int exppoolvalue_;
    public bool HasExppoolvalue {
      get { return hasExppoolvalue; }
    }
    public int Exppoolvalue {
      get { return exppoolvalue_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasExppoolvalue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CExpPoolValueFieldNames;
      if (hasExppoolvalue) {
        output.WriteInt32(1, field_names[0], Exppoolvalue);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasExppoolvalue) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Exppoolvalue);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2CExpPoolValue ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CExpPoolValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CExpPoolValue ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2CExpPoolValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2CExpPoolValue ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CExpPoolValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2CExpPoolValue ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2CExpPoolValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2CExpPoolValue ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2CExpPoolValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2CExpPoolValue MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2CExpPoolValue prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2CExpPoolValue, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2CExpPoolValue cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private S2CExpPoolValue result;
      
      private S2CExpPoolValue PrepareBuilder() {
        if (resultIsReadOnly) {
          S2CExpPoolValue original = result;
          result = new S2CExpPoolValue();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override S2CExpPoolValue MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.S2CExpPoolValue.Descriptor; }
      }
      
      public override S2CExpPoolValue DefaultInstanceForType {
        get { return global::Protocol.S2CExpPoolValue.DefaultInstance; }
      }
      
      public override S2CExpPoolValue BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2CExpPoolValue) {
          return MergeFrom((S2CExpPoolValue) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(S2CExpPoolValue other) {
        if (other == global::Protocol.S2CExpPoolValue.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExppoolvalue) {
          Exppoolvalue = other.Exppoolvalue;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CExpPoolValueFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CExpPoolValueFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasExppoolvalue = input.ReadInt32(ref result.exppoolvalue_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExppoolvalue {
        get { return result.hasExppoolvalue; }
      }
      public int Exppoolvalue {
        get { return result.Exppoolvalue; }
        set { SetExppoolvalue(value); }
      }
      public Builder SetExppoolvalue(int value) {
        PrepareBuilder();
        result.hasExppoolvalue = true;
        result.exppoolvalue_ = value;
        return this;
      }
      public Builder ClearExppoolvalue() {
        PrepareBuilder();
        result.hasExppoolvalue = false;
        result.exppoolvalue_ = 0;
        return this;
      }
    }
    static S2CExpPoolValue() {
      object.ReferenceEquals(global::Protocol.Base.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
